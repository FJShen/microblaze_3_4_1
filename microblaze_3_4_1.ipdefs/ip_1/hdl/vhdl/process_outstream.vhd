-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_outstream is
port (
    outstream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outstream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce1 : OUT STD_LOGIC;
    buffer_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    buffer_r_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    outstream_TVALID : OUT STD_LOGIC;
    outstream_TREADY : IN STD_LOGIC;
    buffer_r_empty_n : IN STD_LOGIC;
    buffer_r_read : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of process_outstream is 
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal process_outstream_Lo_U0_ap_start : STD_LOGIC;
    signal process_outstream_Lo_U0_ap_done : STD_LOGIC;
    signal process_outstream_Lo_U0_ap_continue : STD_LOGIC;
    signal process_outstream_Lo_U0_ap_idle : STD_LOGIC;
    signal process_outstream_Lo_U0_ap_ready : STD_LOGIC;
    signal process_outstream_Lo_U0_outstream_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal process_outstream_Lo_U0_outstream_TVALID : STD_LOGIC;
    signal process_outstream_Lo_U0_outstream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal process_outstream_Lo_U0_buffer_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal process_outstream_Lo_U0_buffer_r_ce0 : STD_LOGIC;
    signal process_outstream_Lo_U0_buffer_r_read : STD_LOGIC;
    signal process_outstream_Lo_U0_buffer_r_full_n : STD_LOGIC;
    signal process_outstream_Lo_U0_buffer_r_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal process_outstream_Lo_U0_start_full_n : STD_LOGIC;
    signal process_outstream_Lo_U0_start_write : STD_LOGIC;

    component process_outstream_Lo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outstream_TREADY : IN STD_LOGIC;
        outstream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        outstream_TVALID : OUT STD_LOGIC;
        outstream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        buffer_r_ce0 : OUT STD_LOGIC;
        buffer_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        buffer_r_read : OUT STD_LOGIC );
    end component;



begin
    process_outstream_Lo_U0 : component process_outstream_Lo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => process_outstream_Lo_U0_ap_start,
        ap_done => process_outstream_Lo_U0_ap_done,
        ap_continue => process_outstream_Lo_U0_ap_continue,
        ap_idle => process_outstream_Lo_U0_ap_idle,
        ap_ready => process_outstream_Lo_U0_ap_ready,
        outstream_TREADY => outstream_TREADY,
        outstream_TDATA => process_outstream_Lo_U0_outstream_TDATA,
        outstream_TVALID => process_outstream_Lo_U0_outstream_TVALID,
        outstream_TLAST => process_outstream_Lo_U0_outstream_TLAST,
        buffer_r_address0 => process_outstream_Lo_U0_buffer_r_address0,
        buffer_r_ce0 => process_outstream_Lo_U0_buffer_r_ce0,
        buffer_r_q0 => buffer_r_q0,
        buffer_r_read => process_outstream_Lo_U0_buffer_r_read);




    ap_done <= process_outstream_Lo_U0_ap_done;
    ap_idle <= process_outstream_Lo_U0_ap_idle;
    ap_ready <= process_outstream_Lo_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= process_outstream_Lo_U0_ap_done;
    ap_sync_ready <= process_outstream_Lo_U0_ap_ready;
    buffer_r_address0 <= process_outstream_Lo_U0_buffer_r_address0;
    buffer_r_address1 <= ap_const_lv10_0;
    buffer_r_ce0 <= process_outstream_Lo_U0_buffer_r_ce0;
    buffer_r_ce1 <= ap_const_logic_0;
    buffer_r_d0 <= ap_const_lv32_0;
    buffer_r_d1 <= ap_const_lv32_0;
    buffer_r_read <= process_outstream_Lo_U0_buffer_r_write;
    buffer_r_we0 <= ap_const_logic_0;
    buffer_r_we1 <= ap_const_logic_0;
    outstream_TDATA <= process_outstream_Lo_U0_outstream_TDATA;
    outstream_TLAST <= process_outstream_Lo_U0_outstream_TLAST;
    outstream_TVALID <= process_outstream_Lo_U0_outstream_TVALID;
    process_outstream_Lo_U0_ap_continue <= ap_continue;
    process_outstream_Lo_U0_ap_start <= ap_start;
    process_outstream_Lo_U0_buffer_r_full_n <= buffer_r_empty_n;
    process_outstream_Lo_U0_buffer_r_write <= ap_const_logic_0;
    process_outstream_Lo_U0_start_full_n <= ap_const_logic_1;
    process_outstream_Lo_U0_start_write <= ap_const_logic_0;
end behav;
