-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity process_instream_Loo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    buffer_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    buffer_r_ce0 : OUT STD_LOGIC;
    buffer_r_we0 : OUT STD_LOGIC;
    buffer_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    instream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    instream_TVALID : IN STD_LOGIC;
    instream_TREADY : OUT STD_LOGIC;
    instream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of process_instream_Loo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3D000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111101000000000000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal exitcond_flatten_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal instream_V_data_0_vld_out : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal instream_V_data_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal instream_V_data_0_vld_in : STD_LOGIC;
    signal instream_V_data_0_ack_in : STD_LOGIC;
    signal instream_V_data_0_ack_out : STD_LOGIC;
    signal instream_V_data_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal instream_V_data_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal instream_V_data_0_sel_rd : STD_LOGIC := '0';
    signal instream_V_data_0_sel_wr : STD_LOGIC := '0';
    signal instream_V_data_0_sel : STD_LOGIC;
    signal instream_V_data_0_load_A : STD_LOGIC;
    signal instream_V_data_0_load_B : STD_LOGIC;
    signal instream_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal instream_V_data_0_state_cmp_full : STD_LOGIC;
    signal instream_V_last_V_0_vld_in : STD_LOGIC;
    signal instream_V_last_V_0_ack_out : STD_LOGIC;
    signal instream_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal next_buffer_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_buffer_ce0 : STD_LOGIC;
    signal next_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_buffer_ce1 : STD_LOGIC;
    signal next_buffer_we1 : STD_LOGIC;
    signal instream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal indvar_flatten_reg_97 : STD_LOGIC_VECTOR (14 downto 0);
    signal tlast_counter1_reg_111 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_i1_reg_125 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_139 : STD_LOGIC_VECTOR (10 downto 0);
    signal tlast_counter_i_reg_153 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_next_fu_176_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_next_reg_247 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal tlast_counter_i_mid2_fu_201_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tlast_counter_i_mid2_reg_261 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_4_i_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter4_tmp_5_i_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter5_tmp_5_i_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter6_tmp_5_i_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter7_tmp_5_i_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter8_tmp_5_i_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter9_tmp_5_i_reg_271 : STD_LOGIC_VECTOR (63 downto 0);
    signal next_buffer_addr_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp0_iter4_next_buffer_addr_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp0_iter5_next_buffer_addr_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp0_iter6_next_buffer_addr_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp0_iter7_next_buffer_addr_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp0_iter8_next_buffer_addr_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp0_iter9_next_buffer_addr_reg_276 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_220_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_282 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_i_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal tlast_counter_fu_232_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tlast_counter_reg_292 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_i_fu_238_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_101_p6 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_tlast_counter1_phi_fu_115_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_exitcond_i1_phi_fu_129_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i_i_phi_fu_143_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_tlast_counter_i_phi_fu_157_p6 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_i_mid2_fu_193_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_167_ce : STD_LOGIC;
    signal grp_fu_171_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_204 : BOOLEAN;

    component stream_average_facud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component stream_average_fmdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component process_instream_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    next_buffer_U : component process_instream_bkb
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => next_buffer_address0,
        ce0 => next_buffer_ce0,
        q0 => next_buffer_q0,
        address1 => ap_reg_pp0_iter9_next_buffer_addr_reg_276,
        ce1 => next_buffer_ce1,
        we1 => next_buffer_we1,
        d1 => tmp_9_i_reg_307);

    stream_average_facud_U1 : component stream_average_facud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_i_reg_297,
        din1 => tmp_8_i_reg_302,
        ce => grp_fu_167_ce,
        dout => grp_fu_167_p2);

    stream_average_fmdEe_U2 : component stream_average_fmdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => instream_V_data_0_data_out,
        din1 => ap_const_lv32_3D000000,
        ce => grp_fu_171_ce,
        dout => grp_fu_171_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter9_exitcond_flatten_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    instream_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                instream_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((instream_V_data_0_ack_out = ap_const_logic_1) and (instream_V_data_0_vld_out = ap_const_logic_1))) then 
                                        instream_V_data_0_sel_rd <= not(instream_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    instream_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                instream_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((instream_V_data_0_ack_in = ap_const_logic_1) and (instream_V_data_0_vld_in = ap_const_logic_1))) then 
                                        instream_V_data_0_sel_wr <= not(instream_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    instream_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                instream_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((instream_V_data_0_state = ap_const_lv2_2) and (instream_V_data_0_vld_in = ap_const_logic_0)) or ((instream_V_data_0_state = ap_const_lv2_3) and (instream_V_data_0_vld_in = ap_const_logic_0) and (instream_V_data_0_ack_out = ap_const_logic_1)))) then 
                    instream_V_data_0_state <= ap_const_lv2_2;
                elsif ((((instream_V_data_0_state = ap_const_lv2_1) and (instream_V_data_0_ack_out = ap_const_logic_0)) or ((instream_V_data_0_state = ap_const_lv2_3) and (instream_V_data_0_ack_out = ap_const_logic_0) and (instream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    instream_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((instream_V_data_0_vld_in = ap_const_logic_0) and (instream_V_data_0_ack_out = ap_const_logic_1))) and not(((instream_V_data_0_ack_out = ap_const_logic_0) and (instream_V_data_0_vld_in = ap_const_logic_1))) and (instream_V_data_0_state = ap_const_lv2_3)) or ((instream_V_data_0_state = ap_const_lv2_1) and (instream_V_data_0_ack_out = ap_const_logic_1)) or ((instream_V_data_0_state = ap_const_lv2_2) and (instream_V_data_0_vld_in = ap_const_logic_1)))) then 
                    instream_V_data_0_state <= ap_const_lv2_3;
                else 
                    instream_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    instream_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                instream_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((instream_V_last_V_0_state = ap_const_lv2_2) and (instream_V_last_V_0_vld_in = ap_const_logic_0)) or ((instream_V_last_V_0_state = ap_const_lv2_3) and (instream_V_last_V_0_vld_in = ap_const_logic_0) and (instream_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    instream_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((instream_V_last_V_0_state = ap_const_lv2_1) and (instream_V_last_V_0_ack_out = ap_const_logic_0)) or ((instream_V_last_V_0_state = ap_const_lv2_3) and (instream_V_last_V_0_ack_out = ap_const_logic_0) and (instream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    instream_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((instream_V_last_V_0_vld_in = ap_const_logic_0) and (instream_V_last_V_0_ack_out = ap_const_logic_1))) and not(((instream_V_last_V_0_ack_out = ap_const_logic_0) and (instream_V_last_V_0_vld_in = ap_const_logic_1))) and (instream_V_last_V_0_state = ap_const_lv2_3)) or ((instream_V_last_V_0_state = ap_const_lv2_1) and (instream_V_last_V_0_ack_out = ap_const_logic_1)) or ((instream_V_last_V_0_state = ap_const_lv2_2) and (instream_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    instream_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    instream_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    exitcond_i1_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                exitcond_i1_reg_125 <= exitcond_i_reg_287;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                exitcond_i1_reg_125 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_i_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                i_i_reg_139 <= i_reg_282;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i_i_reg_139 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_252 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_97 <= indvar_flatten_next_reg_247;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                indvar_flatten_reg_97 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    tlast_counter1_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                tlast_counter1_reg_111 <= tlast_counter_reg_292;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                tlast_counter1_reg_111 <= ap_const_lv6_1;
            end if; 
        end if;
    end process;

    tlast_counter_i_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
                tlast_counter_i_reg_153 <= tlast_counter_i_mid2_reg_261;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                tlast_counter_i_reg_153 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_252 <= exitcond_flatten_reg_252;
                exitcond_flatten_reg_252 <= exitcond_flatten_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_exitcond_flatten_reg_252 <= ap_reg_pp0_iter1_exitcond_flatten_reg_252;
                ap_reg_pp0_iter3_exitcond_flatten_reg_252 <= ap_reg_pp0_iter2_exitcond_flatten_reg_252;
                ap_reg_pp0_iter4_exitcond_flatten_reg_252 <= ap_reg_pp0_iter3_exitcond_flatten_reg_252;
                ap_reg_pp0_iter4_next_buffer_addr_reg_276 <= next_buffer_addr_reg_276;
                    ap_reg_pp0_iter4_tmp_5_i_reg_271(10 downto 0) <= tmp_5_i_reg_271(10 downto 0);
                ap_reg_pp0_iter5_exitcond_flatten_reg_252 <= ap_reg_pp0_iter4_exitcond_flatten_reg_252;
                ap_reg_pp0_iter5_next_buffer_addr_reg_276 <= ap_reg_pp0_iter4_next_buffer_addr_reg_276;
                    ap_reg_pp0_iter5_tmp_5_i_reg_271(10 downto 0) <= ap_reg_pp0_iter4_tmp_5_i_reg_271(10 downto 0);
                ap_reg_pp0_iter6_exitcond_flatten_reg_252 <= ap_reg_pp0_iter5_exitcond_flatten_reg_252;
                ap_reg_pp0_iter6_next_buffer_addr_reg_276 <= ap_reg_pp0_iter5_next_buffer_addr_reg_276;
                    ap_reg_pp0_iter6_tmp_5_i_reg_271(10 downto 0) <= ap_reg_pp0_iter5_tmp_5_i_reg_271(10 downto 0);
                ap_reg_pp0_iter7_exitcond_flatten_reg_252 <= ap_reg_pp0_iter6_exitcond_flatten_reg_252;
                ap_reg_pp0_iter7_next_buffer_addr_reg_276 <= ap_reg_pp0_iter6_next_buffer_addr_reg_276;
                    ap_reg_pp0_iter7_tmp_5_i_reg_271(10 downto 0) <= ap_reg_pp0_iter6_tmp_5_i_reg_271(10 downto 0);
                ap_reg_pp0_iter8_exitcond_flatten_reg_252 <= ap_reg_pp0_iter7_exitcond_flatten_reg_252;
                ap_reg_pp0_iter8_next_buffer_addr_reg_276 <= ap_reg_pp0_iter7_next_buffer_addr_reg_276;
                    ap_reg_pp0_iter8_tmp_5_i_reg_271(10 downto 0) <= ap_reg_pp0_iter7_tmp_5_i_reg_271(10 downto 0);
                ap_reg_pp0_iter9_exitcond_flatten_reg_252 <= ap_reg_pp0_iter8_exitcond_flatten_reg_252;
                ap_reg_pp0_iter9_next_buffer_addr_reg_276 <= ap_reg_pp0_iter8_next_buffer_addr_reg_276;
                    ap_reg_pp0_iter9_tmp_5_i_reg_271(10 downto 0) <= ap_reg_pp0_iter8_tmp_5_i_reg_271(10 downto 0);
                next_buffer_addr_reg_276 <= tmp_5_i_fu_215_p1(10 - 1 downto 0);
                tmp_4_i_reg_266 <= tmp_4_i_fu_209_p2;
                    tmp_5_i_reg_271(10 downto 0) <= tmp_5_i_fu_215_p1(10 downto 0);
                tmp_6_i_reg_297 <= tmp_6_i_fu_238_p3;
                tmp_8_i_reg_302 <= grp_fu_171_p2;
                tmp_9_i_reg_307 <= grp_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                exitcond_i_reg_287 <= exitcond_i_fu_226_p2;
                i_reg_282 <= i_fu_220_p2;
                tlast_counter_i_mid2_reg_261 <= tlast_counter_i_mid2_fu_201_p3;
                tlast_counter_reg_292 <= tlast_counter_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_247 <= indvar_flatten_next_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((instream_V_data_0_load_A = ap_const_logic_1)) then
                instream_V_data_0_payload_A <= instream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((instream_V_data_0_load_B = ap_const_logic_1)) then
                instream_V_data_0_payload_B <= instream_TDATA;
            end if;
        end if;
    end process;
    tmp_5_i_reg_271(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter4_tmp_5_i_reg_271(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter5_tmp_5_i_reg_271(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter6_tmp_5_i_reg_271(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter7_tmp_5_i_reg_271(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter8_tmp_5_i_reg_271(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    ap_reg_pp0_iter9_tmp_5_i_reg_271(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, instream_V_data_0_vld_out, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((instream_V_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, instream_V_data_0_vld_out, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((instream_V_data_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(instream_V_data_0_vld_out)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (instream_V_data_0_vld_out = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_204_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_204 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_11001, ap_reg_pp0_iter9_exitcond_flatten_reg_252, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter9_exitcond_flatten_reg_252 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_exitcond_i1_phi_fu_129_p6_assign_proc : process(ap_block_pp0_stage0, exitcond_i1_reg_125, ap_reg_pp0_iter3_exitcond_flatten_reg_252, exitcond_i_reg_287, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_1)) then 
                ap_phi_mux_exitcond_i1_phi_fu_129_p6 <= ap_const_lv1_0;
            elsif ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_0)) then 
                ap_phi_mux_exitcond_i1_phi_fu_129_p6 <= exitcond_i_reg_287;
            else 
                ap_phi_mux_exitcond_i1_phi_fu_129_p6 <= exitcond_i1_reg_125;
            end if;
        else 
            ap_phi_mux_exitcond_i1_phi_fu_129_p6 <= exitcond_i1_reg_125;
        end if; 
    end process;


    ap_phi_mux_i_i_phi_fu_143_p6_assign_proc : process(ap_block_pp0_stage0, i_i_reg_139, ap_reg_pp0_iter3_exitcond_flatten_reg_252, i_reg_282, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_1)) then 
                ap_phi_mux_i_i_phi_fu_143_p6 <= ap_const_lv11_0;
            elsif ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_0)) then 
                ap_phi_mux_i_i_phi_fu_143_p6 <= i_reg_282;
            else 
                ap_phi_mux_i_i_phi_fu_143_p6 <= i_i_reg_139;
            end if;
        else 
            ap_phi_mux_i_i_phi_fu_143_p6 <= i_i_reg_139;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_101_p6_assign_proc : process(indvar_flatten_reg_97, indvar_flatten_next_reg_247, exitcond_flatten_reg_252, ap_condition_204)
    begin
        if ((ap_const_boolean_1 = ap_condition_204)) then
            if ((exitcond_flatten_reg_252 = ap_const_lv1_1)) then 
                ap_phi_mux_indvar_flatten_phi_fu_101_p6 <= ap_const_lv15_0;
            elsif ((exitcond_flatten_reg_252 = ap_const_lv1_0)) then 
                ap_phi_mux_indvar_flatten_phi_fu_101_p6 <= indvar_flatten_next_reg_247;
            else 
                ap_phi_mux_indvar_flatten_phi_fu_101_p6 <= indvar_flatten_reg_97;
            end if;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_101_p6 <= indvar_flatten_reg_97;
        end if; 
    end process;


    ap_phi_mux_tlast_counter1_phi_fu_115_p6_assign_proc : process(ap_block_pp0_stage0, tlast_counter1_reg_111, ap_reg_pp0_iter3_exitcond_flatten_reg_252, tlast_counter_reg_292, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_1)) then 
                ap_phi_mux_tlast_counter1_phi_fu_115_p6 <= ap_const_lv6_1;
            elsif ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_0)) then 
                ap_phi_mux_tlast_counter1_phi_fu_115_p6 <= tlast_counter_reg_292;
            else 
                ap_phi_mux_tlast_counter1_phi_fu_115_p6 <= tlast_counter1_reg_111;
            end if;
        else 
            ap_phi_mux_tlast_counter1_phi_fu_115_p6 <= tlast_counter1_reg_111;
        end if; 
    end process;


    ap_phi_mux_tlast_counter_i_phi_fu_157_p6_assign_proc : process(ap_block_pp0_stage0, tlast_counter_i_reg_153, ap_reg_pp0_iter3_exitcond_flatten_reg_252, tlast_counter_i_mid2_reg_261, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
            if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_1)) then 
                ap_phi_mux_tlast_counter_i_phi_fu_157_p6 <= ap_const_lv6_0;
            elsif ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 = ap_const_lv1_0)) then 
                ap_phi_mux_tlast_counter_i_phi_fu_157_p6 <= tlast_counter_i_mid2_reg_261;
            else 
                ap_phi_mux_tlast_counter_i_phi_fu_157_p6 <= tlast_counter_i_reg_153;
            end if;
        else 
            ap_phi_mux_tlast_counter_i_phi_fu_157_p6 <= tlast_counter_i_reg_153;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond_flatten_fu_182_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten_fu_182_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_address0 <= ap_reg_pp0_iter9_tmp_5_i_reg_271(10 - 1 downto 0);

    buffer_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    buffer_r_d0 <= tmp_9_i_reg_307;

    buffer_r_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            buffer_r_we0 <= ap_const_logic_1;
        else 
            buffer_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_182_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_101_p6 = ap_const_lv15_7FFF) else "0";
    exitcond_i_fu_226_p2 <= "1" when (i_fu_220_p2 = ap_const_lv11_400) else "0";

    grp_fu_167_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_167_ce <= ap_const_logic_1;
        else 
            grp_fu_167_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_171_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_171_ce <= ap_const_logic_1;
        else 
            grp_fu_171_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_220_p2 <= std_logic_vector(unsigned(i_i_mid2_fu_193_p3) + unsigned(ap_const_lv11_1));
    i_i_mid2_fu_193_p3 <= 
        ap_const_lv11_0 when (ap_phi_mux_exitcond_i1_phi_fu_129_p6(0) = '1') else 
        ap_phi_mux_i_i_phi_fu_143_p6;
    indvar_flatten_next_fu_176_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_101_p6) + unsigned(ap_const_lv15_1));

    instream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, instream_V_data_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_TDATA_blk_n <= instream_V_data_0_state(0);
        else 
            instream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    instream_TREADY <= instream_V_last_V_0_state(1);
    instream_V_data_0_ack_in <= instream_V_data_0_state(1);

    instream_V_data_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_V_data_0_ack_out <= ap_const_logic_1;
        else 
            instream_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    instream_V_data_0_data_out_assign_proc : process(instream_V_data_0_payload_A, instream_V_data_0_payload_B, instream_V_data_0_sel)
    begin
        if ((instream_V_data_0_sel = ap_const_logic_1)) then 
            instream_V_data_0_data_out <= instream_V_data_0_payload_B;
        else 
            instream_V_data_0_data_out <= instream_V_data_0_payload_A;
        end if; 
    end process;

    instream_V_data_0_load_A <= (instream_V_data_0_state_cmp_full and not(instream_V_data_0_sel_wr));
    instream_V_data_0_load_B <= (instream_V_data_0_state_cmp_full and instream_V_data_0_sel_wr);
    instream_V_data_0_sel <= instream_V_data_0_sel_rd;
    instream_V_data_0_state_cmp_full <= '0' when (instream_V_data_0_state = ap_const_lv2_1) else '1';
    instream_V_data_0_vld_in <= instream_TVALID;
    instream_V_data_0_vld_out <= instream_V_data_0_state(0);

    instream_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            instream_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    instream_V_last_V_0_vld_in <= instream_TVALID;
    next_buffer_address0 <= tmp_5_i_fu_215_p1(10 - 1 downto 0);

    next_buffer_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            next_buffer_ce0 <= ap_const_logic_1;
        else 
            next_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    next_buffer_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            next_buffer_ce1 <= ap_const_logic_1;
        else 
            next_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    next_buffer_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            next_buffer_we1 <= ap_const_logic_1;
        else 
            next_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tlast_counter_fu_232_p2 <= std_logic_vector(unsigned(tlast_counter_i_mid2_fu_201_p3) + unsigned(ap_const_lv6_1));
    tlast_counter_i_mid2_fu_201_p3 <= 
        ap_phi_mux_tlast_counter1_phi_fu_115_p6 when (ap_phi_mux_exitcond_i1_phi_fu_129_p6(0) = '1') else 
        ap_phi_mux_tlast_counter_i_phi_fu_157_p6;
    tmp_4_i_fu_209_p2 <= "1" when (tlast_counter_i_mid2_fu_201_p3 = ap_const_lv6_0) else "0";
    tmp_5_i_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_mid2_fu_193_p3),64));
    tmp_6_i_fu_238_p3 <= 
        ap_const_lv32_0 when (tmp_4_i_reg_266(0) = '1') else 
        next_buffer_q0;
end behav;
