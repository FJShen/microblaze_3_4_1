// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hamming_window,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.180000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=226,HLS_SYN_LUT=405}" *)

module hamming_window (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        outstream_TREADY,
        outstream_TDATA,
        outstream_TVALID,
        outstream_TKEEP,
        outstream_TSTRB,
        outstream_TUSER,
        outstream_TLAST,
        outstream_TID,
        outstream_TDEST,
        instream_TDATA,
        instream_TVALID,
        instream_TREADY,
        instream_TKEEP,
        instream_TSTRB,
        instream_TUSER,
        instream_TLAST,
        instream_TID,
        instream_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   outstream_TREADY;
output  [15:0] outstream_TDATA;
output   outstream_TVALID;
output  [1:0] outstream_TKEEP;
output  [1:0] outstream_TSTRB;
output  [0:0] outstream_TUSER;
output  [0:0] outstream_TLAST;
output  [0:0] outstream_TID;
output  [0:0] outstream_TDEST;
input  [15:0] instream_TDATA;
input   instream_TVALID;
output   instream_TREADY;
input  [1:0] instream_TKEEP;
input  [1:0] instream_TSTRB;
input  [0:0] instream_TUSER;
input  [0:0] instream_TLAST;
input  [0:0] instream_TID;
input  [0:0] instream_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    instream_V_data_V_0_vld_out;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    outstream_V_data_V_1_ack_in;
wire    outstream_V_keep_V_1_ack_in;
wire    outstream_V_strb_V_1_ack_in;
wire    outstream_V_user_V_1_ack_in;
wire    outstream_V_last_V_1_ack_in;
wire    outstream_V_id_V_1_ack_in;
wire    outstream_V_dest_V_1_ack_in;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] outstream_V_data_V_1_data_out;
reg    outstream_V_data_V_1_vld_in;
wire    outstream_V_data_V_1_vld_out;
wire    outstream_V_data_V_1_ack_out;
reg   [15:0] outstream_V_data_V_1_payload_A;
reg   [15:0] outstream_V_data_V_1_payload_B;
reg    outstream_V_data_V_1_sel_rd;
reg    outstream_V_data_V_1_sel_wr;
wire    outstream_V_data_V_1_sel;
wire    outstream_V_data_V_1_load_A;
wire    outstream_V_data_V_1_load_B;
reg   [1:0] outstream_V_data_V_1_state;
wire    outstream_V_data_V_1_state_cmp_full;
wire   [1:0] outstream_V_keep_V_1_data_out;
reg    outstream_V_keep_V_1_vld_in;
wire    outstream_V_keep_V_1_vld_out;
wire    outstream_V_keep_V_1_ack_out;
reg    outstream_V_keep_V_1_sel_rd;
wire    outstream_V_keep_V_1_sel;
reg   [1:0] outstream_V_keep_V_1_state;
wire   [1:0] outstream_V_strb_V_1_data_out;
reg    outstream_V_strb_V_1_vld_in;
wire    outstream_V_strb_V_1_vld_out;
wire    outstream_V_strb_V_1_ack_out;
reg    outstream_V_strb_V_1_sel_rd;
wire    outstream_V_strb_V_1_sel;
reg   [1:0] outstream_V_strb_V_1_state;
wire   [0:0] outstream_V_user_V_1_data_out;
reg    outstream_V_user_V_1_vld_in;
wire    outstream_V_user_V_1_vld_out;
wire    outstream_V_user_V_1_ack_out;
reg    outstream_V_user_V_1_sel_rd;
wire    outstream_V_user_V_1_sel;
reg   [1:0] outstream_V_user_V_1_state;
reg   [0:0] outstream_V_last_V_1_data_out;
reg    outstream_V_last_V_1_vld_in;
wire    outstream_V_last_V_1_vld_out;
wire    outstream_V_last_V_1_ack_out;
reg   [0:0] outstream_V_last_V_1_payload_A;
reg   [0:0] outstream_V_last_V_1_payload_B;
reg    outstream_V_last_V_1_sel_rd;
reg    outstream_V_last_V_1_sel_wr;
wire    outstream_V_last_V_1_sel;
wire    outstream_V_last_V_1_load_A;
wire    outstream_V_last_V_1_load_B;
reg   [1:0] outstream_V_last_V_1_state;
wire    outstream_V_last_V_1_state_cmp_full;
wire   [0:0] outstream_V_id_V_1_data_out;
reg    outstream_V_id_V_1_vld_in;
wire    outstream_V_id_V_1_vld_out;
wire    outstream_V_id_V_1_ack_out;
reg    outstream_V_id_V_1_sel_rd;
wire    outstream_V_id_V_1_sel;
reg   [1:0] outstream_V_id_V_1_state;
wire   [0:0] outstream_V_dest_V_1_data_out;
reg    outstream_V_dest_V_1_vld_in;
wire    outstream_V_dest_V_1_vld_out;
wire    outstream_V_dest_V_1_ack_out;
reg    outstream_V_dest_V_1_sel_rd;
wire    outstream_V_dest_V_1_sel;
reg   [1:0] outstream_V_dest_V_1_state;
reg   [15:0] instream_V_data_V_0_data_out;
wire    instream_V_data_V_0_vld_in;
wire    instream_V_data_V_0_ack_in;
reg    instream_V_data_V_0_ack_out;
reg   [15:0] instream_V_data_V_0_payload_A;
reg   [15:0] instream_V_data_V_0_payload_B;
reg    instream_V_data_V_0_sel_rd;
reg    instream_V_data_V_0_sel_wr;
wire    instream_V_data_V_0_sel;
wire    instream_V_data_V_0_load_A;
wire    instream_V_data_V_0_load_B;
reg   [1:0] instream_V_data_V_0_state;
wire    instream_V_data_V_0_state_cmp_full;
wire    instream_V_dest_V_0_vld_in;
reg    instream_V_dest_V_0_ack_out;
reg   [1:0] instream_V_dest_V_0_state;
reg   [31:0] i;
wire   [10:0] window_coeff_V_address0;
reg    window_coeff_V_ce0;
wire   [13:0] window_coeff_V_q0;
reg    outstream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    instream_TDATA_blk_n;
wire   [0:0] tmp_last_V_fu_139_p2;
reg   [0:0] tmp_last_V_reg_197;
reg   [0:0] ap_reg_pp0_iter1_tmp_last_V_reg_197;
reg  signed [15:0] tmp_data_V_reg_202;
reg   [13:0] window_coeff_V_load_reg_207;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_s_fu_134_p1;
wire   [31:0] tmp_4_fu_151_p3;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_3_fu_145_p2;
wire  signed [29:0] temp_V_fu_185_p2;
wire   [13:0] temp_V_fu_185_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [29:0] temp_V_fu_185_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 outstream_V_data_V_1_sel_rd = 1'b0;
#0 outstream_V_data_V_1_sel_wr = 1'b0;
#0 outstream_V_data_V_1_state = 2'd0;
#0 outstream_V_keep_V_1_sel_rd = 1'b0;
#0 outstream_V_keep_V_1_state = 2'd0;
#0 outstream_V_strb_V_1_sel_rd = 1'b0;
#0 outstream_V_strb_V_1_state = 2'd0;
#0 outstream_V_user_V_1_sel_rd = 1'b0;
#0 outstream_V_user_V_1_state = 2'd0;
#0 outstream_V_last_V_1_sel_rd = 1'b0;
#0 outstream_V_last_V_1_sel_wr = 1'b0;
#0 outstream_V_last_V_1_state = 2'd0;
#0 outstream_V_id_V_1_sel_rd = 1'b0;
#0 outstream_V_id_V_1_state = 2'd0;
#0 outstream_V_dest_V_1_sel_rd = 1'b0;
#0 outstream_V_dest_V_1_state = 2'd0;
#0 instream_V_data_V_0_sel_rd = 1'b0;
#0 instream_V_data_V_0_sel_wr = 1'b0;
#0 instream_V_data_V_0_state = 2'd0;
#0 instream_V_dest_V_0_state = 2'd0;
#0 i = 32'd0;
end

hamming_window_wibkb #(
    .DataWidth( 14 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
window_coeff_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(window_coeff_V_address0),
    .ce0(window_coeff_V_ce0),
    .q0(window_coeff_V_q0)
);

hamming_window_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 30 ))
hamming_window_mucud_U1(
    .din0(tmp_data_V_reg_202),
    .din1(temp_V_fu_185_p1),
    .dout(temp_V_fu_185_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        instream_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((instream_V_data_V_0_ack_out == 1'b1) & (instream_V_data_V_0_vld_out == 1'b1))) begin
            instream_V_data_V_0_sel_rd <= ~instream_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        instream_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((instream_V_data_V_0_ack_in == 1'b1) & (instream_V_data_V_0_vld_in == 1'b1))) begin
            instream_V_data_V_0_sel_wr <= ~instream_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        instream_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((instream_V_data_V_0_vld_in == 1'b0) & (instream_V_data_V_0_state == 2'd2)) | ((instream_V_data_V_0_vld_in == 1'b0) & (instream_V_data_V_0_ack_out == 1'b1) & (instream_V_data_V_0_state == 2'd3)))) begin
            instream_V_data_V_0_state <= 2'd2;
        end else if ((((instream_V_data_V_0_ack_out == 1'b0) & (instream_V_data_V_0_state == 2'd1)) | ((instream_V_data_V_0_ack_out == 1'b0) & (instream_V_data_V_0_vld_in == 1'b1) & (instream_V_data_V_0_state == 2'd3)))) begin
            instream_V_data_V_0_state <= 2'd1;
        end else if (((~((instream_V_data_V_0_vld_in == 1'b0) & (instream_V_data_V_0_ack_out == 1'b1)) & ~((instream_V_data_V_0_ack_out == 1'b0) & (instream_V_data_V_0_vld_in == 1'b1)) & (instream_V_data_V_0_state == 2'd3)) | ((instream_V_data_V_0_ack_out == 1'b1) & (instream_V_data_V_0_state == 2'd1)) | ((instream_V_data_V_0_vld_in == 1'b1) & (instream_V_data_V_0_state == 2'd2)))) begin
            instream_V_data_V_0_state <= 2'd3;
        end else begin
            instream_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        instream_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((instream_V_dest_V_0_vld_in == 1'b0) & (instream_V_dest_V_0_state == 2'd2)) | ((instream_V_dest_V_0_vld_in == 1'b0) & (instream_V_dest_V_0_ack_out == 1'b1) & (instream_V_dest_V_0_state == 2'd3)))) begin
            instream_V_dest_V_0_state <= 2'd2;
        end else if ((((instream_V_dest_V_0_ack_out == 1'b0) & (instream_V_dest_V_0_state == 2'd1)) | ((instream_V_dest_V_0_ack_out == 1'b0) & (instream_V_dest_V_0_vld_in == 1'b1) & (instream_V_dest_V_0_state == 2'd3)))) begin
            instream_V_dest_V_0_state <= 2'd1;
        end else if (((~((instream_V_dest_V_0_vld_in == 1'b0) & (instream_V_dest_V_0_ack_out == 1'b1)) & ~((instream_V_dest_V_0_ack_out == 1'b0) & (instream_V_dest_V_0_vld_in == 1'b1)) & (instream_V_dest_V_0_state == 2'd3)) | ((instream_V_dest_V_0_ack_out == 1'b1) & (instream_V_dest_V_0_state == 2'd1)) | ((instream_V_dest_V_0_vld_in == 1'b1) & (instream_V_dest_V_0_state == 2'd2)))) begin
            instream_V_dest_V_0_state <= 2'd3;
        end else begin
            instream_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_data_V_1_ack_out == 1'b1) & (outstream_V_data_V_1_vld_out == 1'b1))) begin
            outstream_V_data_V_1_sel_rd <= ~outstream_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outstream_V_data_V_1_vld_in == 1'b1) & (outstream_V_data_V_1_ack_in == 1'b1))) begin
            outstream_V_data_V_1_sel_wr <= ~outstream_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_data_V_1_vld_in == 1'b0) & (outstream_V_data_V_1_state == 2'd2)) | ((outstream_V_data_V_1_vld_in == 1'b0) & (outstream_V_data_V_1_ack_out == 1'b1) & (outstream_V_data_V_1_state == 2'd3)))) begin
            outstream_V_data_V_1_state <= 2'd2;
        end else if ((((outstream_V_data_V_1_ack_out == 1'b0) & (outstream_V_data_V_1_state == 2'd1)) | ((outstream_V_data_V_1_ack_out == 1'b0) & (outstream_V_data_V_1_vld_in == 1'b1) & (outstream_V_data_V_1_state == 2'd3)))) begin
            outstream_V_data_V_1_state <= 2'd1;
        end else if (((~((outstream_V_data_V_1_vld_in == 1'b0) & (outstream_V_data_V_1_ack_out == 1'b1)) & ~((outstream_V_data_V_1_ack_out == 1'b0) & (outstream_V_data_V_1_vld_in == 1'b1)) & (outstream_V_data_V_1_state == 2'd3)) | ((outstream_V_data_V_1_ack_out == 1'b1) & (outstream_V_data_V_1_state == 2'd1)) | ((outstream_V_data_V_1_vld_in == 1'b1) & (outstream_V_data_V_1_state == 2'd2)))) begin
            outstream_V_data_V_1_state <= 2'd3;
        end else begin
            outstream_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_dest_V_1_ack_out == 1'b1) & (outstream_V_dest_V_1_vld_out == 1'b1))) begin
            outstream_V_dest_V_1_sel_rd <= ~outstream_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_dest_V_1_vld_in == 1'b0) & (outstream_V_dest_V_1_state == 2'd2)) | ((outstream_V_dest_V_1_vld_in == 1'b0) & (outstream_V_dest_V_1_ack_out == 1'b1) & (outstream_V_dest_V_1_state == 2'd3)))) begin
            outstream_V_dest_V_1_state <= 2'd2;
        end else if ((((outstream_V_dest_V_1_ack_out == 1'b0) & (outstream_V_dest_V_1_state == 2'd1)) | ((outstream_V_dest_V_1_ack_out == 1'b0) & (outstream_V_dest_V_1_vld_in == 1'b1) & (outstream_V_dest_V_1_state == 2'd3)))) begin
            outstream_V_dest_V_1_state <= 2'd1;
        end else if (((~((outstream_V_dest_V_1_vld_in == 1'b0) & (outstream_V_dest_V_1_ack_out == 1'b1)) & ~((outstream_V_dest_V_1_ack_out == 1'b0) & (outstream_V_dest_V_1_vld_in == 1'b1)) & (outstream_V_dest_V_1_state == 2'd3)) | ((outstream_V_dest_V_1_ack_out == 1'b1) & (outstream_V_dest_V_1_state == 2'd1)) | ((outstream_V_dest_V_1_vld_in == 1'b1) & (outstream_V_dest_V_1_state == 2'd2)))) begin
            outstream_V_dest_V_1_state <= 2'd3;
        end else begin
            outstream_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_id_V_1_ack_out == 1'b1) & (outstream_V_id_V_1_vld_out == 1'b1))) begin
            outstream_V_id_V_1_sel_rd <= ~outstream_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_id_V_1_vld_in == 1'b0) & (outstream_V_id_V_1_state == 2'd2)) | ((outstream_V_id_V_1_vld_in == 1'b0) & (outstream_V_id_V_1_ack_out == 1'b1) & (outstream_V_id_V_1_state == 2'd3)))) begin
            outstream_V_id_V_1_state <= 2'd2;
        end else if ((((outstream_V_id_V_1_ack_out == 1'b0) & (outstream_V_id_V_1_state == 2'd1)) | ((outstream_V_id_V_1_ack_out == 1'b0) & (outstream_V_id_V_1_vld_in == 1'b1) & (outstream_V_id_V_1_state == 2'd3)))) begin
            outstream_V_id_V_1_state <= 2'd1;
        end else if (((~((outstream_V_id_V_1_vld_in == 1'b0) & (outstream_V_id_V_1_ack_out == 1'b1)) & ~((outstream_V_id_V_1_ack_out == 1'b0) & (outstream_V_id_V_1_vld_in == 1'b1)) & (outstream_V_id_V_1_state == 2'd3)) | ((outstream_V_id_V_1_ack_out == 1'b1) & (outstream_V_id_V_1_state == 2'd1)) | ((outstream_V_id_V_1_vld_in == 1'b1) & (outstream_V_id_V_1_state == 2'd2)))) begin
            outstream_V_id_V_1_state <= 2'd3;
        end else begin
            outstream_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_keep_V_1_ack_out == 1'b1) & (outstream_V_keep_V_1_vld_out == 1'b1))) begin
            outstream_V_keep_V_1_sel_rd <= ~outstream_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_keep_V_1_vld_in == 1'b0) & (outstream_V_keep_V_1_state == 2'd2)) | ((outstream_V_keep_V_1_vld_in == 1'b0) & (outstream_V_keep_V_1_ack_out == 1'b1) & (outstream_V_keep_V_1_state == 2'd3)))) begin
            outstream_V_keep_V_1_state <= 2'd2;
        end else if ((((outstream_V_keep_V_1_ack_out == 1'b0) & (outstream_V_keep_V_1_state == 2'd1)) | ((outstream_V_keep_V_1_ack_out == 1'b0) & (outstream_V_keep_V_1_vld_in == 1'b1) & (outstream_V_keep_V_1_state == 2'd3)))) begin
            outstream_V_keep_V_1_state <= 2'd1;
        end else if (((~((outstream_V_keep_V_1_vld_in == 1'b0) & (outstream_V_keep_V_1_ack_out == 1'b1)) & ~((outstream_V_keep_V_1_ack_out == 1'b0) & (outstream_V_keep_V_1_vld_in == 1'b1)) & (outstream_V_keep_V_1_state == 2'd3)) | ((outstream_V_keep_V_1_ack_out == 1'b1) & (outstream_V_keep_V_1_state == 2'd1)) | ((outstream_V_keep_V_1_vld_in == 1'b1) & (outstream_V_keep_V_1_state == 2'd2)))) begin
            outstream_V_keep_V_1_state <= 2'd3;
        end else begin
            outstream_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_last_V_1_ack_out == 1'b1) & (outstream_V_last_V_1_vld_out == 1'b1))) begin
            outstream_V_last_V_1_sel_rd <= ~outstream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outstream_V_last_V_1_ack_in == 1'b1) & (outstream_V_last_V_1_vld_in == 1'b1))) begin
            outstream_V_last_V_1_sel_wr <= ~outstream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_last_V_1_vld_in == 1'b0) & (outstream_V_last_V_1_state == 2'd2)) | ((outstream_V_last_V_1_vld_in == 1'b0) & (outstream_V_last_V_1_ack_out == 1'b1) & (outstream_V_last_V_1_state == 2'd3)))) begin
            outstream_V_last_V_1_state <= 2'd2;
        end else if ((((outstream_V_last_V_1_ack_out == 1'b0) & (outstream_V_last_V_1_state == 2'd1)) | ((outstream_V_last_V_1_ack_out == 1'b0) & (outstream_V_last_V_1_vld_in == 1'b1) & (outstream_V_last_V_1_state == 2'd3)))) begin
            outstream_V_last_V_1_state <= 2'd1;
        end else if (((~((outstream_V_last_V_1_vld_in == 1'b0) & (outstream_V_last_V_1_ack_out == 1'b1)) & ~((outstream_V_last_V_1_ack_out == 1'b0) & (outstream_V_last_V_1_vld_in == 1'b1)) & (outstream_V_last_V_1_state == 2'd3)) | ((outstream_V_last_V_1_ack_out == 1'b1) & (outstream_V_last_V_1_state == 2'd1)) | ((outstream_V_last_V_1_vld_in == 1'b1) & (outstream_V_last_V_1_state == 2'd2)))) begin
            outstream_V_last_V_1_state <= 2'd3;
        end else begin
            outstream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_strb_V_1_ack_out == 1'b1) & (outstream_V_strb_V_1_vld_out == 1'b1))) begin
            outstream_V_strb_V_1_sel_rd <= ~outstream_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_strb_V_1_vld_in == 1'b0) & (outstream_V_strb_V_1_state == 2'd2)) | ((outstream_V_strb_V_1_vld_in == 1'b0) & (outstream_V_strb_V_1_ack_out == 1'b1) & (outstream_V_strb_V_1_state == 2'd3)))) begin
            outstream_V_strb_V_1_state <= 2'd2;
        end else if ((((outstream_V_strb_V_1_ack_out == 1'b0) & (outstream_V_strb_V_1_state == 2'd1)) | ((outstream_V_strb_V_1_ack_out == 1'b0) & (outstream_V_strb_V_1_vld_in == 1'b1) & (outstream_V_strb_V_1_state == 2'd3)))) begin
            outstream_V_strb_V_1_state <= 2'd1;
        end else if (((~((outstream_V_strb_V_1_vld_in == 1'b0) & (outstream_V_strb_V_1_ack_out == 1'b1)) & ~((outstream_V_strb_V_1_ack_out == 1'b0) & (outstream_V_strb_V_1_vld_in == 1'b1)) & (outstream_V_strb_V_1_state == 2'd3)) | ((outstream_V_strb_V_1_ack_out == 1'b1) & (outstream_V_strb_V_1_state == 2'd1)) | ((outstream_V_strb_V_1_vld_in == 1'b1) & (outstream_V_strb_V_1_state == 2'd2)))) begin
            outstream_V_strb_V_1_state <= 2'd3;
        end else begin
            outstream_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_user_V_1_ack_out == 1'b1) & (outstream_V_user_V_1_vld_out == 1'b1))) begin
            outstream_V_user_V_1_sel_rd <= ~outstream_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outstream_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_user_V_1_vld_in == 1'b0) & (outstream_V_user_V_1_state == 2'd2)) | ((outstream_V_user_V_1_vld_in == 1'b0) & (outstream_V_user_V_1_ack_out == 1'b1) & (outstream_V_user_V_1_state == 2'd3)))) begin
            outstream_V_user_V_1_state <= 2'd2;
        end else if ((((outstream_V_user_V_1_ack_out == 1'b0) & (outstream_V_user_V_1_state == 2'd1)) | ((outstream_V_user_V_1_ack_out == 1'b0) & (outstream_V_user_V_1_vld_in == 1'b1) & (outstream_V_user_V_1_state == 2'd3)))) begin
            outstream_V_user_V_1_state <= 2'd1;
        end else if (((~((outstream_V_user_V_1_vld_in == 1'b0) & (outstream_V_user_V_1_ack_out == 1'b1)) & ~((outstream_V_user_V_1_ack_out == 1'b0) & (outstream_V_user_V_1_vld_in == 1'b1)) & (outstream_V_user_V_1_state == 2'd3)) | ((outstream_V_user_V_1_ack_out == 1'b1) & (outstream_V_user_V_1_state == 2'd1)) | ((outstream_V_user_V_1_vld_in == 1'b1) & (outstream_V_user_V_1_state == 2'd2)))) begin
            outstream_V_user_V_1_state <= 2'd3;
        end else begin
            outstream_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_tmp_last_V_reg_197 <= tmp_last_V_reg_197;
        tmp_data_V_reg_202 <= instream_V_data_V_0_data_out;
        tmp_last_V_reg_197 <= tmp_last_V_fu_139_p2;
        window_coeff_V_load_reg_207 <= window_coeff_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i <= tmp_4_fu_151_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((instream_V_data_V_0_load_A == 1'b1)) begin
        instream_V_data_V_0_payload_A <= instream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((instream_V_data_V_0_load_B == 1'b1)) begin
        instream_V_data_V_0_payload_B <= instream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_V_data_V_1_load_A == 1'b1)) begin
        outstream_V_data_V_1_payload_A <= {{temp_V_fu_185_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_V_data_V_1_load_B == 1'b1)) begin
        outstream_V_data_V_1_payload_B <= {{temp_V_fu_185_p2[29:14]}};
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_V_last_V_1_load_A == 1'b1)) begin
        outstream_V_last_V_1_payload_A <= ap_reg_pp0_iter1_tmp_last_V_reg_197;
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_V_last_V_1_load_B == 1'b1)) begin
        outstream_V_last_V_1_payload_B <= ap_reg_pp0_iter1_tmp_last_V_reg_197;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_TDATA_blk_n = instream_V_data_V_0_state[1'd0];
    end else begin
        instream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_V_data_V_0_ack_out = 1'b1;
    end else begin
        instream_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((instream_V_data_V_0_sel == 1'b1)) begin
        instream_V_data_V_0_data_out = instream_V_data_V_0_payload_B;
    end else begin
        instream_V_data_V_0_data_out = instream_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_V_dest_V_0_ack_out = 1'b1;
    end else begin
        instream_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        outstream_TDATA_blk_n = outstream_V_data_V_1_state[1'd1];
    end else begin
        outstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outstream_V_data_V_1_sel == 1'b1)) begin
        outstream_V_data_V_1_data_out = outstream_V_data_V_1_payload_B;
    end else begin
        outstream_V_data_V_1_data_out = outstream_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outstream_V_data_V_1_vld_in = 1'b1;
    end else begin
        outstream_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outstream_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outstream_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outstream_V_id_V_1_vld_in = 1'b1;
    end else begin
        outstream_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outstream_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outstream_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outstream_V_last_V_1_sel == 1'b1)) begin
        outstream_V_last_V_1_data_out = outstream_V_last_V_1_payload_B;
    end else begin
        outstream_V_last_V_1_data_out = outstream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outstream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outstream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outstream_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outstream_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        outstream_V_user_V_1_vld_in = 1'b1;
    end else begin
        outstream_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        window_coeff_V_ce0 = 1'b1;
    end else begin
        window_coeff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((outstream_V_dest_V_1_ack_in == 1'b0) | (outstream_V_id_V_1_ack_in == 1'b0) | (outstream_V_last_V_1_ack_in == 1'b0) | (outstream_V_user_V_1_ack_in == 1'b0) | (outstream_V_strb_V_1_ack_in == 1'b0) | (outstream_V_keep_V_1_ack_in == 1'b0) | (outstream_V_data_V_1_ack_in == 1'b0))) | ((instream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((outstream_V_dest_V_1_ack_in == 1'b0) | (outstream_V_id_V_1_ack_in == 1'b0) | (outstream_V_last_V_1_ack_in == 1'b0) | (outstream_V_user_V_1_ack_in == 1'b0) | (outstream_V_strb_V_1_ack_in == 1'b0) | (outstream_V_keep_V_1_ack_in == 1'b0) | (outstream_V_data_V_1_ack_in == 1'b0))) | ((outstream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((instream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((outstream_V_dest_V_1_ack_in == 1'b0) | (outstream_V_id_V_1_ack_in == 1'b0) | (outstream_V_last_V_1_ack_in == 1'b0) | (outstream_V_user_V_1_ack_in == 1'b0) | (outstream_V_strb_V_1_ack_in == 1'b0) | (outstream_V_keep_V_1_ack_in == 1'b0) | (outstream_V_data_V_1_ack_in == 1'b0))) | ((outstream_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((instream_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (instream_V_data_V_0_vld_out == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((outstream_V_dest_V_1_ack_in == 1'b0) | (outstream_V_id_V_1_ack_in == 1'b0) | (outstream_V_last_V_1_ack_in == 1'b0) | (outstream_V_user_V_1_ack_in == 1'b0) | (outstream_V_strb_V_1_ack_in == 1'b0) | (outstream_V_keep_V_1_ack_in == 1'b0) | (outstream_V_data_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign instream_TREADY = instream_V_dest_V_0_state[1'd1];

assign instream_V_data_V_0_ack_in = instream_V_data_V_0_state[1'd1];

assign instream_V_data_V_0_load_A = (instream_V_data_V_0_state_cmp_full & ~instream_V_data_V_0_sel_wr);

assign instream_V_data_V_0_load_B = (instream_V_data_V_0_state_cmp_full & instream_V_data_V_0_sel_wr);

assign instream_V_data_V_0_sel = instream_V_data_V_0_sel_rd;

assign instream_V_data_V_0_state_cmp_full = ((instream_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign instream_V_data_V_0_vld_in = instream_TVALID;

assign instream_V_data_V_0_vld_out = instream_V_data_V_0_state[1'd0];

assign instream_V_dest_V_0_vld_in = instream_TVALID;

assign outstream_TDATA = outstream_V_data_V_1_data_out;

assign outstream_TDEST = outstream_V_dest_V_1_data_out;

assign outstream_TID = outstream_V_id_V_1_data_out;

assign outstream_TKEEP = outstream_V_keep_V_1_data_out;

assign outstream_TLAST = outstream_V_last_V_1_data_out;

assign outstream_TSTRB = outstream_V_strb_V_1_data_out;

assign outstream_TUSER = outstream_V_user_V_1_data_out;

assign outstream_TVALID = outstream_V_dest_V_1_state[1'd0];

assign outstream_V_data_V_1_ack_in = outstream_V_data_V_1_state[1'd1];

assign outstream_V_data_V_1_ack_out = outstream_TREADY;

assign outstream_V_data_V_1_load_A = (outstream_V_data_V_1_state_cmp_full & ~outstream_V_data_V_1_sel_wr);

assign outstream_V_data_V_1_load_B = (outstream_V_data_V_1_state_cmp_full & outstream_V_data_V_1_sel_wr);

assign outstream_V_data_V_1_sel = outstream_V_data_V_1_sel_rd;

assign outstream_V_data_V_1_state_cmp_full = ((outstream_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outstream_V_data_V_1_vld_out = outstream_V_data_V_1_state[1'd0];

assign outstream_V_dest_V_1_ack_in = outstream_V_dest_V_1_state[1'd1];

assign outstream_V_dest_V_1_ack_out = outstream_TREADY;

assign outstream_V_dest_V_1_data_out = 1'd0;

assign outstream_V_dest_V_1_sel = outstream_V_dest_V_1_sel_rd;

assign outstream_V_dest_V_1_vld_out = outstream_V_dest_V_1_state[1'd0];

assign outstream_V_id_V_1_ack_in = outstream_V_id_V_1_state[1'd1];

assign outstream_V_id_V_1_ack_out = outstream_TREADY;

assign outstream_V_id_V_1_data_out = 1'd0;

assign outstream_V_id_V_1_sel = outstream_V_id_V_1_sel_rd;

assign outstream_V_id_V_1_vld_out = outstream_V_id_V_1_state[1'd0];

assign outstream_V_keep_V_1_ack_in = outstream_V_keep_V_1_state[1'd1];

assign outstream_V_keep_V_1_ack_out = outstream_TREADY;

assign outstream_V_keep_V_1_data_out = 2'd3;

assign outstream_V_keep_V_1_sel = outstream_V_keep_V_1_sel_rd;

assign outstream_V_keep_V_1_vld_out = outstream_V_keep_V_1_state[1'd0];

assign outstream_V_last_V_1_ack_in = outstream_V_last_V_1_state[1'd1];

assign outstream_V_last_V_1_ack_out = outstream_TREADY;

assign outstream_V_last_V_1_load_A = (outstream_V_last_V_1_state_cmp_full & ~outstream_V_last_V_1_sel_wr);

assign outstream_V_last_V_1_load_B = (outstream_V_last_V_1_state_cmp_full & outstream_V_last_V_1_sel_wr);

assign outstream_V_last_V_1_sel = outstream_V_last_V_1_sel_rd;

assign outstream_V_last_V_1_state_cmp_full = ((outstream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outstream_V_last_V_1_vld_out = outstream_V_last_V_1_state[1'd0];

assign outstream_V_strb_V_1_ack_in = outstream_V_strb_V_1_state[1'd1];

assign outstream_V_strb_V_1_ack_out = outstream_TREADY;

assign outstream_V_strb_V_1_data_out = 2'd3;

assign outstream_V_strb_V_1_sel = outstream_V_strb_V_1_sel_rd;

assign outstream_V_strb_V_1_vld_out = outstream_V_strb_V_1_state[1'd0];

assign outstream_V_user_V_1_ack_in = outstream_V_user_V_1_state[1'd1];

assign outstream_V_user_V_1_ack_out = outstream_TREADY;

assign outstream_V_user_V_1_data_out = 1'd0;

assign outstream_V_user_V_1_sel = outstream_V_user_V_1_sel_rd;

assign outstream_V_user_V_1_vld_out = outstream_V_user_V_1_state[1'd0];

assign temp_V_fu_185_p1 = temp_V_fu_185_p10;

assign temp_V_fu_185_p10 = window_coeff_V_load_reg_207;

assign tmp_3_fu_145_p2 = (i + 32'd1);

assign tmp_4_fu_151_p3 = ((tmp_last_V_fu_139_p2[0:0] === 1'b1) ? 32'd0 : tmp_3_fu_145_p2);

assign tmp_last_V_fu_139_p2 = ((i == 32'd2047) ? 1'b1 : 1'b0);

assign tmp_s_fu_134_p1 = i;

assign window_coeff_V_address0 = tmp_s_fu_134_p1;

endmodule //hamming_window
