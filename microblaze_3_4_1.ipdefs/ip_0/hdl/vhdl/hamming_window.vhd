-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hamming_window is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outstream_TREADY : IN STD_LOGIC;
    outstream_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    outstream_TVALID : OUT STD_LOGIC;
    outstream_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    outstream_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    outstream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    outstream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outstream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    outstream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    instream_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    instream_TVALID : IN STD_LOGIC;
    instream_TREADY : OUT STD_LOGIC;
    instream_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    instream_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    instream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    instream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    instream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    instream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of hamming_window is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hamming_window,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.180000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=226,HLS_SYN_LUT=405}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000011111111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal instream_V_data_V_0_vld_out : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal outstream_V_data_V_1_ack_in : STD_LOGIC;
    signal outstream_V_keep_V_1_ack_in : STD_LOGIC;
    signal outstream_V_strb_V_1_ack_in : STD_LOGIC;
    signal outstream_V_user_V_1_ack_in : STD_LOGIC;
    signal outstream_V_last_V_1_ack_in : STD_LOGIC;
    signal outstream_V_id_V_1_ack_in : STD_LOGIC;
    signal outstream_V_dest_V_1_ack_in : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal outstream_V_data_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal outstream_V_data_V_1_vld_in : STD_LOGIC;
    signal outstream_V_data_V_1_vld_out : STD_LOGIC;
    signal outstream_V_data_V_1_ack_out : STD_LOGIC;
    signal outstream_V_data_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal outstream_V_data_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal outstream_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outstream_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outstream_V_data_V_1_sel : STD_LOGIC;
    signal outstream_V_data_V_1_load_A : STD_LOGIC;
    signal outstream_V_data_V_1_load_B : STD_LOGIC;
    signal outstream_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outstream_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outstream_V_keep_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outstream_V_keep_V_1_vld_in : STD_LOGIC;
    signal outstream_V_keep_V_1_vld_out : STD_LOGIC;
    signal outstream_V_keep_V_1_ack_out : STD_LOGIC;
    signal outstream_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outstream_V_keep_V_1_sel : STD_LOGIC;
    signal outstream_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outstream_V_strb_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal outstream_V_strb_V_1_vld_in : STD_LOGIC;
    signal outstream_V_strb_V_1_vld_out : STD_LOGIC;
    signal outstream_V_strb_V_1_ack_out : STD_LOGIC;
    signal outstream_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outstream_V_strb_V_1_sel : STD_LOGIC;
    signal outstream_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outstream_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outstream_V_user_V_1_vld_in : STD_LOGIC;
    signal outstream_V_user_V_1_vld_out : STD_LOGIC;
    signal outstream_V_user_V_1_ack_out : STD_LOGIC;
    signal outstream_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outstream_V_user_V_1_sel : STD_LOGIC;
    signal outstream_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outstream_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outstream_V_last_V_1_vld_in : STD_LOGIC;
    signal outstream_V_last_V_1_vld_out : STD_LOGIC;
    signal outstream_V_last_V_1_ack_out : STD_LOGIC;
    signal outstream_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outstream_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outstream_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outstream_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outstream_V_last_V_1_sel : STD_LOGIC;
    signal outstream_V_last_V_1_load_A : STD_LOGIC;
    signal outstream_V_last_V_1_load_B : STD_LOGIC;
    signal outstream_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outstream_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outstream_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outstream_V_id_V_1_vld_in : STD_LOGIC;
    signal outstream_V_id_V_1_vld_out : STD_LOGIC;
    signal outstream_V_id_V_1_ack_out : STD_LOGIC;
    signal outstream_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outstream_V_id_V_1_sel : STD_LOGIC;
    signal outstream_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outstream_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outstream_V_dest_V_1_vld_in : STD_LOGIC;
    signal outstream_V_dest_V_1_vld_out : STD_LOGIC;
    signal outstream_V_dest_V_1_ack_out : STD_LOGIC;
    signal outstream_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outstream_V_dest_V_1_sel : STD_LOGIC;
    signal outstream_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal instream_V_data_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal instream_V_data_V_0_vld_in : STD_LOGIC;
    signal instream_V_data_V_0_ack_in : STD_LOGIC;
    signal instream_V_data_V_0_ack_out : STD_LOGIC;
    signal instream_V_data_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal instream_V_data_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal instream_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal instream_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal instream_V_data_V_0_sel : STD_LOGIC;
    signal instream_V_data_V_0_load_A : STD_LOGIC;
    signal instream_V_data_V_0_load_B : STD_LOGIC;
    signal instream_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal instream_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal instream_V_dest_V_0_vld_in : STD_LOGIC;
    signal instream_V_dest_V_0_ack_out : STD_LOGIC;
    signal instream_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal window_coeff_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_coeff_V_ce0 : STD_LOGIC;
    signal window_coeff_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal outstream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal instream_TDATA_blk_n : STD_LOGIC;
    signal tmp_last_V_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_last_V_reg_197 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_202 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_coeff_V_load_reg_207 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_s_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_151_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_V_fu_185_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal temp_V_fu_185_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal temp_V_fu_185_p10 : STD_LOGIC_VECTOR (29 downto 0);

    component hamming_window_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component hamming_window_wibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    window_coeff_V_U : component hamming_window_wibkb
    generic map (
        DataWidth => 14,
        AddressRange => 2048,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => window_coeff_V_address0,
        ce0 => window_coeff_V_ce0,
        q0 => window_coeff_V_q0);

    hamming_window_mucud_U1 : component hamming_window_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 30)
    port map (
        din0 => tmp_data_V_reg_202,
        din1 => temp_V_fu_185_p1,
        dout => temp_V_fu_185_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    instream_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                instream_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((instream_V_data_V_0_ack_out = ap_const_logic_1) and (instream_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        instream_V_data_V_0_sel_rd <= not(instream_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    instream_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                instream_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((instream_V_data_V_0_ack_in = ap_const_logic_1) and (instream_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        instream_V_data_V_0_sel_wr <= not(instream_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    instream_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                instream_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((instream_V_data_V_0_vld_in = ap_const_logic_0) and (instream_V_data_V_0_state = ap_const_lv2_2)) or ((instream_V_data_V_0_vld_in = ap_const_logic_0) and (instream_V_data_V_0_ack_out = ap_const_logic_1) and (instream_V_data_V_0_state = ap_const_lv2_3)))) then 
                    instream_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((instream_V_data_V_0_ack_out = ap_const_logic_0) and (instream_V_data_V_0_state = ap_const_lv2_1)) or ((instream_V_data_V_0_ack_out = ap_const_logic_0) and (instream_V_data_V_0_vld_in = ap_const_logic_1) and (instream_V_data_V_0_state = ap_const_lv2_3)))) then 
                    instream_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((instream_V_data_V_0_vld_in = ap_const_logic_0) and (instream_V_data_V_0_ack_out = ap_const_logic_1))) and not(((instream_V_data_V_0_ack_out = ap_const_logic_0) and (instream_V_data_V_0_vld_in = ap_const_logic_1))) and (instream_V_data_V_0_state = ap_const_lv2_3)) or ((instream_V_data_V_0_ack_out = ap_const_logic_1) and (instream_V_data_V_0_state = ap_const_lv2_1)) or ((instream_V_data_V_0_vld_in = ap_const_logic_1) and (instream_V_data_V_0_state = ap_const_lv2_2)))) then 
                    instream_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    instream_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    instream_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                instream_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((instream_V_dest_V_0_vld_in = ap_const_logic_0) and (instream_V_dest_V_0_state = ap_const_lv2_2)) or ((instream_V_dest_V_0_vld_in = ap_const_logic_0) and (instream_V_dest_V_0_ack_out = ap_const_logic_1) and (instream_V_dest_V_0_state = ap_const_lv2_3)))) then 
                    instream_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((instream_V_dest_V_0_ack_out = ap_const_logic_0) and (instream_V_dest_V_0_state = ap_const_lv2_1)) or ((instream_V_dest_V_0_ack_out = ap_const_logic_0) and (instream_V_dest_V_0_vld_in = ap_const_logic_1) and (instream_V_dest_V_0_state = ap_const_lv2_3)))) then 
                    instream_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((instream_V_dest_V_0_vld_in = ap_const_logic_0) and (instream_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((instream_V_dest_V_0_ack_out = ap_const_logic_0) and (instream_V_dest_V_0_vld_in = ap_const_logic_1))) and (instream_V_dest_V_0_state = ap_const_lv2_3)) or ((instream_V_dest_V_0_ack_out = ap_const_logic_1) and (instream_V_dest_V_0_state = ap_const_lv2_1)) or ((instream_V_dest_V_0_vld_in = ap_const_logic_1) and (instream_V_dest_V_0_state = ap_const_lv2_2)))) then 
                    instream_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    instream_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outstream_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outstream_V_data_V_1_ack_out = ap_const_logic_1) and (outstream_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        outstream_V_data_V_1_sel_rd <= not(outstream_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outstream_V_data_V_1_vld_in = ap_const_logic_1) and (outstream_V_data_V_1_ack_in = ap_const_logic_1))) then 
                                        outstream_V_data_V_1_sel_wr <= not(outstream_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((outstream_V_data_V_1_vld_in = ap_const_logic_0) and (outstream_V_data_V_1_state = ap_const_lv2_2)) or ((outstream_V_data_V_1_vld_in = ap_const_logic_0) and (outstream_V_data_V_1_ack_out = ap_const_logic_1) and (outstream_V_data_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((outstream_V_data_V_1_ack_out = ap_const_logic_0) and (outstream_V_data_V_1_state = ap_const_lv2_1)) or ((outstream_V_data_V_1_ack_out = ap_const_logic_0) and (outstream_V_data_V_1_vld_in = ap_const_logic_1) and (outstream_V_data_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outstream_V_data_V_1_vld_in = ap_const_logic_0) and (outstream_V_data_V_1_ack_out = ap_const_logic_1))) and not(((outstream_V_data_V_1_ack_out = ap_const_logic_0) and (outstream_V_data_V_1_vld_in = ap_const_logic_1))) and (outstream_V_data_V_1_state = ap_const_lv2_3)) or ((outstream_V_data_V_1_ack_out = ap_const_logic_1) and (outstream_V_data_V_1_state = ap_const_lv2_1)) or ((outstream_V_data_V_1_vld_in = ap_const_logic_1) and (outstream_V_data_V_1_state = ap_const_lv2_2)))) then 
                    outstream_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outstream_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outstream_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outstream_V_dest_V_1_ack_out = ap_const_logic_1) and (outstream_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        outstream_V_dest_V_1_sel_rd <= not(outstream_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((outstream_V_dest_V_1_vld_in = ap_const_logic_0) and (outstream_V_dest_V_1_state = ap_const_lv2_2)) or ((outstream_V_dest_V_1_vld_in = ap_const_logic_0) and (outstream_V_dest_V_1_ack_out = ap_const_logic_1) and (outstream_V_dest_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((outstream_V_dest_V_1_ack_out = ap_const_logic_0) and (outstream_V_dest_V_1_state = ap_const_lv2_1)) or ((outstream_V_dest_V_1_ack_out = ap_const_logic_0) and (outstream_V_dest_V_1_vld_in = ap_const_logic_1) and (outstream_V_dest_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outstream_V_dest_V_1_vld_in = ap_const_logic_0) and (outstream_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((outstream_V_dest_V_1_ack_out = ap_const_logic_0) and (outstream_V_dest_V_1_vld_in = ap_const_logic_1))) and (outstream_V_dest_V_1_state = ap_const_lv2_3)) or ((outstream_V_dest_V_1_ack_out = ap_const_logic_1) and (outstream_V_dest_V_1_state = ap_const_lv2_1)) or ((outstream_V_dest_V_1_vld_in = ap_const_logic_1) and (outstream_V_dest_V_1_state = ap_const_lv2_2)))) then 
                    outstream_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outstream_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outstream_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outstream_V_id_V_1_ack_out = ap_const_logic_1) and (outstream_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        outstream_V_id_V_1_sel_rd <= not(outstream_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((outstream_V_id_V_1_vld_in = ap_const_logic_0) and (outstream_V_id_V_1_state = ap_const_lv2_2)) or ((outstream_V_id_V_1_vld_in = ap_const_logic_0) and (outstream_V_id_V_1_ack_out = ap_const_logic_1) and (outstream_V_id_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((outstream_V_id_V_1_ack_out = ap_const_logic_0) and (outstream_V_id_V_1_state = ap_const_lv2_1)) or ((outstream_V_id_V_1_ack_out = ap_const_logic_0) and (outstream_V_id_V_1_vld_in = ap_const_logic_1) and (outstream_V_id_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outstream_V_id_V_1_vld_in = ap_const_logic_0) and (outstream_V_id_V_1_ack_out = ap_const_logic_1))) and not(((outstream_V_id_V_1_ack_out = ap_const_logic_0) and (outstream_V_id_V_1_vld_in = ap_const_logic_1))) and (outstream_V_id_V_1_state = ap_const_lv2_3)) or ((outstream_V_id_V_1_ack_out = ap_const_logic_1) and (outstream_V_id_V_1_state = ap_const_lv2_1)) or ((outstream_V_id_V_1_vld_in = ap_const_logic_1) and (outstream_V_id_V_1_state = ap_const_lv2_2)))) then 
                    outstream_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outstream_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outstream_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outstream_V_keep_V_1_ack_out = ap_const_logic_1) and (outstream_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        outstream_V_keep_V_1_sel_rd <= not(outstream_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((outstream_V_keep_V_1_vld_in = ap_const_logic_0) and (outstream_V_keep_V_1_state = ap_const_lv2_2)) or ((outstream_V_keep_V_1_vld_in = ap_const_logic_0) and (outstream_V_keep_V_1_ack_out = ap_const_logic_1) and (outstream_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((outstream_V_keep_V_1_ack_out = ap_const_logic_0) and (outstream_V_keep_V_1_state = ap_const_lv2_1)) or ((outstream_V_keep_V_1_ack_out = ap_const_logic_0) and (outstream_V_keep_V_1_vld_in = ap_const_logic_1) and (outstream_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outstream_V_keep_V_1_vld_in = ap_const_logic_0) and (outstream_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((outstream_V_keep_V_1_ack_out = ap_const_logic_0) and (outstream_V_keep_V_1_vld_in = ap_const_logic_1))) and (outstream_V_keep_V_1_state = ap_const_lv2_3)) or ((outstream_V_keep_V_1_ack_out = ap_const_logic_1) and (outstream_V_keep_V_1_state = ap_const_lv2_1)) or ((outstream_V_keep_V_1_vld_in = ap_const_logic_1) and (outstream_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    outstream_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outstream_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outstream_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outstream_V_last_V_1_ack_out = ap_const_logic_1) and (outstream_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        outstream_V_last_V_1_sel_rd <= not(outstream_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outstream_V_last_V_1_ack_in = ap_const_logic_1) and (outstream_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        outstream_V_last_V_1_sel_wr <= not(outstream_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((outstream_V_last_V_1_vld_in = ap_const_logic_0) and (outstream_V_last_V_1_state = ap_const_lv2_2)) or ((outstream_V_last_V_1_vld_in = ap_const_logic_0) and (outstream_V_last_V_1_ack_out = ap_const_logic_1) and (outstream_V_last_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((outstream_V_last_V_1_ack_out = ap_const_logic_0) and (outstream_V_last_V_1_state = ap_const_lv2_1)) or ((outstream_V_last_V_1_ack_out = ap_const_logic_0) and (outstream_V_last_V_1_vld_in = ap_const_logic_1) and (outstream_V_last_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outstream_V_last_V_1_vld_in = ap_const_logic_0) and (outstream_V_last_V_1_ack_out = ap_const_logic_1))) and not(((outstream_V_last_V_1_ack_out = ap_const_logic_0) and (outstream_V_last_V_1_vld_in = ap_const_logic_1))) and (outstream_V_last_V_1_state = ap_const_lv2_3)) or ((outstream_V_last_V_1_ack_out = ap_const_logic_1) and (outstream_V_last_V_1_state = ap_const_lv2_1)) or ((outstream_V_last_V_1_vld_in = ap_const_logic_1) and (outstream_V_last_V_1_state = ap_const_lv2_2)))) then 
                    outstream_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outstream_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outstream_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outstream_V_strb_V_1_ack_out = ap_const_logic_1) and (outstream_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        outstream_V_strb_V_1_sel_rd <= not(outstream_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((outstream_V_strb_V_1_vld_in = ap_const_logic_0) and (outstream_V_strb_V_1_state = ap_const_lv2_2)) or ((outstream_V_strb_V_1_vld_in = ap_const_logic_0) and (outstream_V_strb_V_1_ack_out = ap_const_logic_1) and (outstream_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((outstream_V_strb_V_1_ack_out = ap_const_logic_0) and (outstream_V_strb_V_1_state = ap_const_lv2_1)) or ((outstream_V_strb_V_1_ack_out = ap_const_logic_0) and (outstream_V_strb_V_1_vld_in = ap_const_logic_1) and (outstream_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outstream_V_strb_V_1_vld_in = ap_const_logic_0) and (outstream_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((outstream_V_strb_V_1_ack_out = ap_const_logic_0) and (outstream_V_strb_V_1_vld_in = ap_const_logic_1))) and (outstream_V_strb_V_1_state = ap_const_lv2_3)) or ((outstream_V_strb_V_1_ack_out = ap_const_logic_1) and (outstream_V_strb_V_1_state = ap_const_lv2_1)) or ((outstream_V_strb_V_1_vld_in = ap_const_logic_1) and (outstream_V_strb_V_1_state = ap_const_lv2_2)))) then 
                    outstream_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outstream_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outstream_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outstream_V_user_V_1_ack_out = ap_const_logic_1) and (outstream_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        outstream_V_user_V_1_sel_rd <= not(outstream_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outstream_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outstream_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((outstream_V_user_V_1_vld_in = ap_const_logic_0) and (outstream_V_user_V_1_state = ap_const_lv2_2)) or ((outstream_V_user_V_1_vld_in = ap_const_logic_0) and (outstream_V_user_V_1_ack_out = ap_const_logic_1) and (outstream_V_user_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((outstream_V_user_V_1_ack_out = ap_const_logic_0) and (outstream_V_user_V_1_state = ap_const_lv2_1)) or ((outstream_V_user_V_1_ack_out = ap_const_logic_0) and (outstream_V_user_V_1_vld_in = ap_const_logic_1) and (outstream_V_user_V_1_state = ap_const_lv2_3)))) then 
                    outstream_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outstream_V_user_V_1_vld_in = ap_const_logic_0) and (outstream_V_user_V_1_ack_out = ap_const_logic_1))) and not(((outstream_V_user_V_1_ack_out = ap_const_logic_0) and (outstream_V_user_V_1_vld_in = ap_const_logic_1))) and (outstream_V_user_V_1_state = ap_const_lv2_3)) or ((outstream_V_user_V_1_ack_out = ap_const_logic_1) and (outstream_V_user_V_1_state = ap_const_lv2_1)) or ((outstream_V_user_V_1_vld_in = ap_const_logic_1) and (outstream_V_user_V_1_state = ap_const_lv2_2)))) then 
                    outstream_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outstream_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_tmp_last_V_reg_197 <= tmp_last_V_reg_197;
                tmp_data_V_reg_202 <= instream_V_data_V_0_data_out;
                tmp_last_V_reg_197 <= tmp_last_V_fu_139_p2;
                window_coeff_V_load_reg_207 <= window_coeff_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i <= tmp_4_fu_151_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((instream_V_data_V_0_load_A = ap_const_logic_1)) then
                instream_V_data_V_0_payload_A <= instream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((instream_V_data_V_0_load_B = ap_const_logic_1)) then
                instream_V_data_V_0_payload_B <= instream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outstream_V_data_V_1_load_A = ap_const_logic_1)) then
                outstream_V_data_V_1_payload_A <= temp_V_fu_185_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outstream_V_data_V_1_load_B = ap_const_logic_1)) then
                outstream_V_data_V_1_payload_B <= temp_V_fu_185_p2(29 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outstream_V_last_V_1_load_A = ap_const_logic_1)) then
                outstream_V_last_V_1_payload_A <= ap_reg_pp0_iter1_tmp_last_V_reg_197;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outstream_V_last_V_1_load_B = ap_const_logic_1)) then
                outstream_V_last_V_1_payload_B <= ap_reg_pp0_iter1_tmp_last_V_reg_197;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, instream_V_data_V_0_vld_out, outstream_V_data_V_1_ack_in, outstream_V_keep_V_1_ack_in, outstream_V_strb_V_1_ack_in, outstream_V_user_V_1_ack_in, outstream_V_last_V_1_ack_in, outstream_V_id_V_1_ack_in, outstream_V_dest_V_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((outstream_V_dest_V_1_ack_in = ap_const_logic_0) or (outstream_V_id_V_1_ack_in = ap_const_logic_0) or (outstream_V_last_V_1_ack_in = ap_const_logic_0) or (outstream_V_user_V_1_ack_in = ap_const_logic_0) or (outstream_V_strb_V_1_ack_in = ap_const_logic_0) or (outstream_V_keep_V_1_ack_in = ap_const_logic_0) or (outstream_V_data_V_1_ack_in = ap_const_logic_0))) or ((instream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, instream_V_data_V_0_vld_out, outstream_V_data_V_1_ack_in, outstream_V_keep_V_1_ack_in, outstream_V_strb_V_1_ack_in, outstream_V_user_V_1_ack_in, outstream_V_last_V_1_ack_in, outstream_V_id_V_1_ack_in, outstream_V_dest_V_1_ack_in)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((outstream_V_dest_V_1_ack_in = ap_const_logic_0) or (outstream_V_id_V_1_ack_in = ap_const_logic_0) or (outstream_V_last_V_1_ack_in = ap_const_logic_0) or (outstream_V_user_V_1_ack_in = ap_const_logic_0) or (outstream_V_strb_V_1_ack_in = ap_const_logic_0) or (outstream_V_keep_V_1_ack_in = ap_const_logic_0) or (outstream_V_data_V_1_ack_in = ap_const_logic_0))) or ((outstream_V_data_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((instream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, instream_V_data_V_0_vld_out, outstream_V_data_V_1_ack_in, outstream_V_keep_V_1_ack_in, outstream_V_strb_V_1_ack_in, outstream_V_user_V_1_ack_in, outstream_V_last_V_1_ack_in, outstream_V_id_V_1_ack_in, outstream_V_dest_V_1_ack_in)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((outstream_V_dest_V_1_ack_in = ap_const_logic_0) or (outstream_V_id_V_1_ack_in = ap_const_logic_0) or (outstream_V_last_V_1_ack_in = ap_const_logic_0) or (outstream_V_user_V_1_ack_in = ap_const_logic_0) or (outstream_V_strb_V_1_ack_in = ap_const_logic_0) or (outstream_V_keep_V_1_ack_in = ap_const_logic_0) or (outstream_V_data_V_1_ack_in = ap_const_logic_0))) or ((outstream_V_data_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((instream_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(instream_V_data_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (instream_V_data_V_0_vld_out = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(outstream_V_data_V_1_ack_in, outstream_V_keep_V_1_ack_in, outstream_V_strb_V_1_ack_in, outstream_V_user_V_1_ack_in, outstream_V_last_V_1_ack_in, outstream_V_id_V_1_ack_in, outstream_V_dest_V_1_ack_in)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((outstream_V_dest_V_1_ack_in = ap_const_logic_0) or (outstream_V_id_V_1_ack_in = ap_const_logic_0) or (outstream_V_last_V_1_ack_in = ap_const_logic_0) or (outstream_V_user_V_1_ack_in = ap_const_logic_0) or (outstream_V_strb_V_1_ack_in = ap_const_logic_0) or (outstream_V_keep_V_1_ack_in = ap_const_logic_0) or (outstream_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    instream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, instream_V_data_V_0_state, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_TDATA_blk_n <= instream_V_data_V_0_state(0);
        else 
            instream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    instream_TREADY <= instream_V_dest_V_0_state(1);
    instream_V_data_V_0_ack_in <= instream_V_data_V_0_state(1);

    instream_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            instream_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    instream_V_data_V_0_data_out_assign_proc : process(instream_V_data_V_0_payload_A, instream_V_data_V_0_payload_B, instream_V_data_V_0_sel)
    begin
        if ((instream_V_data_V_0_sel = ap_const_logic_1)) then 
            instream_V_data_V_0_data_out <= instream_V_data_V_0_payload_B;
        else 
            instream_V_data_V_0_data_out <= instream_V_data_V_0_payload_A;
        end if; 
    end process;

    instream_V_data_V_0_load_A <= (instream_V_data_V_0_state_cmp_full and not(instream_V_data_V_0_sel_wr));
    instream_V_data_V_0_load_B <= (instream_V_data_V_0_state_cmp_full and instream_V_data_V_0_sel_wr);
    instream_V_data_V_0_sel <= instream_V_data_V_0_sel_rd;
    instream_V_data_V_0_state_cmp_full <= '0' when (instream_V_data_V_0_state = ap_const_lv2_1) else '1';
    instream_V_data_V_0_vld_in <= instream_TVALID;
    instream_V_data_V_0_vld_out <= instream_V_data_V_0_state(0);

    instream_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            instream_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            instream_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    instream_V_dest_V_0_vld_in <= instream_TVALID;
    outstream_TDATA <= outstream_V_data_V_1_data_out;

    outstream_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, outstream_V_data_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            outstream_TDATA_blk_n <= outstream_V_data_V_1_state(1);
        else 
            outstream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outstream_TDEST <= outstream_V_dest_V_1_data_out;
    outstream_TID <= outstream_V_id_V_1_data_out;
    outstream_TKEEP <= outstream_V_keep_V_1_data_out;
    outstream_TLAST <= outstream_V_last_V_1_data_out;
    outstream_TSTRB <= outstream_V_strb_V_1_data_out;
    outstream_TUSER <= outstream_V_user_V_1_data_out;
    outstream_TVALID <= outstream_V_dest_V_1_state(0);
    outstream_V_data_V_1_ack_in <= outstream_V_data_V_1_state(1);
    outstream_V_data_V_1_ack_out <= outstream_TREADY;

    outstream_V_data_V_1_data_out_assign_proc : process(outstream_V_data_V_1_payload_A, outstream_V_data_V_1_payload_B, outstream_V_data_V_1_sel)
    begin
        if ((outstream_V_data_V_1_sel = ap_const_logic_1)) then 
            outstream_V_data_V_1_data_out <= outstream_V_data_V_1_payload_B;
        else 
            outstream_V_data_V_1_data_out <= outstream_V_data_V_1_payload_A;
        end if; 
    end process;

    outstream_V_data_V_1_load_A <= (outstream_V_data_V_1_state_cmp_full and not(outstream_V_data_V_1_sel_wr));
    outstream_V_data_V_1_load_B <= (outstream_V_data_V_1_state_cmp_full and outstream_V_data_V_1_sel_wr);
    outstream_V_data_V_1_sel <= outstream_V_data_V_1_sel_rd;
    outstream_V_data_V_1_state_cmp_full <= '0' when (outstream_V_data_V_1_state = ap_const_lv2_1) else '1';

    outstream_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outstream_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outstream_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outstream_V_data_V_1_vld_out <= outstream_V_data_V_1_state(0);
    outstream_V_dest_V_1_ack_in <= outstream_V_dest_V_1_state(1);
    outstream_V_dest_V_1_ack_out <= outstream_TREADY;
    outstream_V_dest_V_1_data_out <= ap_const_lv1_0;
    outstream_V_dest_V_1_sel <= outstream_V_dest_V_1_sel_rd;

    outstream_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outstream_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outstream_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outstream_V_dest_V_1_vld_out <= outstream_V_dest_V_1_state(0);
    outstream_V_id_V_1_ack_in <= outstream_V_id_V_1_state(1);
    outstream_V_id_V_1_ack_out <= outstream_TREADY;
    outstream_V_id_V_1_data_out <= ap_const_lv1_0;
    outstream_V_id_V_1_sel <= outstream_V_id_V_1_sel_rd;

    outstream_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outstream_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outstream_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outstream_V_id_V_1_vld_out <= outstream_V_id_V_1_state(0);
    outstream_V_keep_V_1_ack_in <= outstream_V_keep_V_1_state(1);
    outstream_V_keep_V_1_ack_out <= outstream_TREADY;
    outstream_V_keep_V_1_data_out <= ap_const_lv2_3;
    outstream_V_keep_V_1_sel <= outstream_V_keep_V_1_sel_rd;

    outstream_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outstream_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outstream_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outstream_V_keep_V_1_vld_out <= outstream_V_keep_V_1_state(0);
    outstream_V_last_V_1_ack_in <= outstream_V_last_V_1_state(1);
    outstream_V_last_V_1_ack_out <= outstream_TREADY;

    outstream_V_last_V_1_data_out_assign_proc : process(outstream_V_last_V_1_payload_A, outstream_V_last_V_1_payload_B, outstream_V_last_V_1_sel)
    begin
        if ((outstream_V_last_V_1_sel = ap_const_logic_1)) then 
            outstream_V_last_V_1_data_out <= outstream_V_last_V_1_payload_B;
        else 
            outstream_V_last_V_1_data_out <= outstream_V_last_V_1_payload_A;
        end if; 
    end process;

    outstream_V_last_V_1_load_A <= (outstream_V_last_V_1_state_cmp_full and not(outstream_V_last_V_1_sel_wr));
    outstream_V_last_V_1_load_B <= (outstream_V_last_V_1_state_cmp_full and outstream_V_last_V_1_sel_wr);
    outstream_V_last_V_1_sel <= outstream_V_last_V_1_sel_rd;
    outstream_V_last_V_1_state_cmp_full <= '0' when (outstream_V_last_V_1_state = ap_const_lv2_1) else '1';

    outstream_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outstream_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outstream_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outstream_V_last_V_1_vld_out <= outstream_V_last_V_1_state(0);
    outstream_V_strb_V_1_ack_in <= outstream_V_strb_V_1_state(1);
    outstream_V_strb_V_1_ack_out <= outstream_TREADY;
    outstream_V_strb_V_1_data_out <= ap_const_lv2_3;
    outstream_V_strb_V_1_sel <= outstream_V_strb_V_1_sel_rd;

    outstream_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outstream_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outstream_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outstream_V_strb_V_1_vld_out <= outstream_V_strb_V_1_state(0);
    outstream_V_user_V_1_ack_in <= outstream_V_user_V_1_state(1);
    outstream_V_user_V_1_ack_out <= outstream_TREADY;
    outstream_V_user_V_1_data_out <= ap_const_lv1_0;
    outstream_V_user_V_1_sel <= outstream_V_user_V_1_sel_rd;

    outstream_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            outstream_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outstream_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outstream_V_user_V_1_vld_out <= outstream_V_user_V_1_state(0);
    temp_V_fu_185_p1 <= temp_V_fu_185_p10(14 - 1 downto 0);
    temp_V_fu_185_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(window_coeff_V_load_reg_207),30));
    tmp_3_fu_145_p2 <= std_logic_vector(unsigned(i) + unsigned(ap_const_lv32_1));
    tmp_4_fu_151_p3 <= 
        ap_const_lv32_0 when (tmp_last_V_fu_139_p2(0) = '1') else 
        tmp_3_fu_145_p2;
    tmp_last_V_fu_139_p2 <= "1" when (i = ap_const_lv32_7FF) else "0";
    tmp_s_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i),64));
    window_coeff_V_address0 <= tmp_s_fu_134_p1(11 - 1 downto 0);

    window_coeff_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            window_coeff_V_ce0 <= ap_const_logic_1;
        else 
            window_coeff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
