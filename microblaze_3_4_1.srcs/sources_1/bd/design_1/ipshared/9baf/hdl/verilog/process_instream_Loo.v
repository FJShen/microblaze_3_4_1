// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_instream_Loo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_we0,
        buffer_r_d0,
        instream_TDATA,
        instream_TVALID,
        instream_TREADY,
        instream_TLAST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
output   buffer_r_we0;
output  [31:0] buffer_r_d0;
input  [31:0] instream_TDATA;
input   instream_TVALID;
output   instream_TREADY;
input  [0:0] instream_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_r_ce0;
reg buffer_r_we0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] exitcond_flatten_fu_182_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    instream_V_data_0_vld_out;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] instream_V_data_0_data_out;
wire    instream_V_data_0_vld_in;
wire    instream_V_data_0_ack_in;
reg    instream_V_data_0_ack_out;
reg   [31:0] instream_V_data_0_payload_A;
reg   [31:0] instream_V_data_0_payload_B;
reg    instream_V_data_0_sel_rd;
reg    instream_V_data_0_sel_wr;
wire    instream_V_data_0_sel;
wire    instream_V_data_0_load_A;
wire    instream_V_data_0_load_B;
reg   [1:0] instream_V_data_0_state;
wire    instream_V_data_0_state_cmp_full;
wire    instream_V_last_V_0_vld_in;
reg    instream_V_last_V_0_ack_out;
reg   [1:0] instream_V_last_V_0_state;
wire   [9:0] next_buffer_address0;
reg    next_buffer_ce0;
wire   [31:0] next_buffer_q0;
reg    next_buffer_ce1;
reg    next_buffer_we1;
reg    instream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [14:0] indvar_flatten_reg_97;
reg   [5:0] tlast_counter1_reg_111;
reg   [0:0] exitcond_i1_reg_125;
reg   [10:0] i_i_reg_139;
reg   [5:0] tlast_counter_i_reg_153;
wire   [14:0] indvar_flatten_next_fu_176_p2;
reg   [14:0] indvar_flatten_next_reg_247;
reg   [0:0] exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_252;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_252;
wire   [5:0] tlast_counter_i_mid2_fu_201_p3;
reg   [5:0] tlast_counter_i_mid2_reg_261;
reg    ap_enable_reg_pp0_iter3;
wire   [0:0] tmp_4_i_fu_209_p2;
reg   [0:0] tmp_4_i_reg_266;
wire   [63:0] tmp_5_i_fu_215_p1;
reg   [63:0] tmp_5_i_reg_271;
reg   [63:0] ap_reg_pp0_iter4_tmp_5_i_reg_271;
reg   [63:0] ap_reg_pp0_iter5_tmp_5_i_reg_271;
reg   [63:0] ap_reg_pp0_iter6_tmp_5_i_reg_271;
reg   [63:0] ap_reg_pp0_iter7_tmp_5_i_reg_271;
reg   [63:0] ap_reg_pp0_iter8_tmp_5_i_reg_271;
reg   [63:0] ap_reg_pp0_iter9_tmp_5_i_reg_271;
reg   [9:0] next_buffer_addr_reg_276;
reg   [9:0] ap_reg_pp0_iter4_next_buffer_addr_reg_276;
reg   [9:0] ap_reg_pp0_iter5_next_buffer_addr_reg_276;
reg   [9:0] ap_reg_pp0_iter6_next_buffer_addr_reg_276;
reg   [9:0] ap_reg_pp0_iter7_next_buffer_addr_reg_276;
reg   [9:0] ap_reg_pp0_iter8_next_buffer_addr_reg_276;
reg   [9:0] ap_reg_pp0_iter9_next_buffer_addr_reg_276;
wire   [10:0] i_fu_220_p2;
reg   [10:0] i_reg_282;
wire   [0:0] exitcond_i_fu_226_p2;
reg   [0:0] exitcond_i_reg_287;
wire   [5:0] tlast_counter_fu_232_p2;
reg   [5:0] tlast_counter_reg_292;
wire   [31:0] tmp_6_i_fu_238_p3;
reg   [31:0] tmp_6_i_reg_297;
wire   [31:0] grp_fu_171_p2;
reg   [31:0] tmp_8_i_reg_302;
wire   [31:0] grp_fu_167_p2;
reg   [31:0] tmp_9_i_reg_307;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg   [14:0] ap_phi_mux_indvar_flatten_phi_fu_101_p6;
reg   [5:0] ap_phi_mux_tlast_counter1_phi_fu_115_p6;
reg   [0:0] ap_phi_mux_exitcond_i1_phi_fu_129_p6;
reg   [10:0] ap_phi_mux_i_i_phi_fu_143_p6;
reg   [5:0] ap_phi_mux_tlast_counter_i_phi_fu_157_p6;
wire   [10:0] i_i_mid2_fu_193_p3;
reg    grp_fu_167_ce;
reg    grp_fu_171_ce;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to9;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_204;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 instream_V_data_0_sel_rd = 1'b0;
#0 instream_V_data_0_sel_wr = 1'b0;
#0 instream_V_data_0_state = 2'd0;
#0 instream_V_last_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

process_instream_bkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
next_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(next_buffer_address0),
    .ce0(next_buffer_ce0),
    .q0(next_buffer_q0),
    .address1(ap_reg_pp0_iter9_next_buffer_addr_reg_276),
    .ce1(next_buffer_ce1),
    .we1(next_buffer_we1),
    .d1(tmp_9_i_reg_307)
);

stream_average_facud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
stream_average_facud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_i_reg_297),
    .din1(tmp_8_i_reg_302),
    .ce(grp_fu_167_ce),
    .dout(grp_fu_167_p2)
);

stream_average_fmdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
stream_average_fmdEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(instream_V_data_0_data_out),
    .din1(32'd1023410176),
    .ce(grp_fu_171_ce),
    .dout(grp_fu_171_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter9_exitcond_flatten_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        instream_V_data_0_sel_rd <= 1'b0;
    end else begin
        if (((instream_V_data_0_ack_out == 1'b1) & (instream_V_data_0_vld_out == 1'b1))) begin
            instream_V_data_0_sel_rd <= ~instream_V_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        instream_V_data_0_sel_wr <= 1'b0;
    end else begin
        if (((instream_V_data_0_ack_in == 1'b1) & (instream_V_data_0_vld_in == 1'b1))) begin
            instream_V_data_0_sel_wr <= ~instream_V_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        instream_V_data_0_state <= 2'd0;
    end else begin
        if ((((instream_V_data_0_state == 2'd2) & (instream_V_data_0_vld_in == 1'b0)) | ((instream_V_data_0_state == 2'd3) & (instream_V_data_0_vld_in == 1'b0) & (instream_V_data_0_ack_out == 1'b1)))) begin
            instream_V_data_0_state <= 2'd2;
        end else if ((((instream_V_data_0_state == 2'd1) & (instream_V_data_0_ack_out == 1'b0)) | ((instream_V_data_0_state == 2'd3) & (instream_V_data_0_ack_out == 1'b0) & (instream_V_data_0_vld_in == 1'b1)))) begin
            instream_V_data_0_state <= 2'd1;
        end else if (((~((instream_V_data_0_vld_in == 1'b0) & (instream_V_data_0_ack_out == 1'b1)) & ~((instream_V_data_0_ack_out == 1'b0) & (instream_V_data_0_vld_in == 1'b1)) & (instream_V_data_0_state == 2'd3)) | ((instream_V_data_0_state == 2'd1) & (instream_V_data_0_ack_out == 1'b1)) | ((instream_V_data_0_state == 2'd2) & (instream_V_data_0_vld_in == 1'b1)))) begin
            instream_V_data_0_state <= 2'd3;
        end else begin
            instream_V_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        instream_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((instream_V_last_V_0_state == 2'd2) & (instream_V_last_V_0_vld_in == 1'b0)) | ((instream_V_last_V_0_state == 2'd3) & (instream_V_last_V_0_vld_in == 1'b0) & (instream_V_last_V_0_ack_out == 1'b1)))) begin
            instream_V_last_V_0_state <= 2'd2;
        end else if ((((instream_V_last_V_0_state == 2'd1) & (instream_V_last_V_0_ack_out == 1'b0)) | ((instream_V_last_V_0_state == 2'd3) & (instream_V_last_V_0_ack_out == 1'b0) & (instream_V_last_V_0_vld_in == 1'b1)))) begin
            instream_V_last_V_0_state <= 2'd1;
        end else if (((~((instream_V_last_V_0_vld_in == 1'b0) & (instream_V_last_V_0_ack_out == 1'b1)) & ~((instream_V_last_V_0_ack_out == 1'b0) & (instream_V_last_V_0_vld_in == 1'b1)) & (instream_V_last_V_0_state == 2'd3)) | ((instream_V_last_V_0_state == 2'd1) & (instream_V_last_V_0_ack_out == 1'b1)) | ((instream_V_last_V_0_state == 2'd2) & (instream_V_last_V_0_vld_in == 1'b1)))) begin
            instream_V_last_V_0_state <= 2'd3;
        end else begin
            instream_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        exitcond_i1_reg_125 <= exitcond_i_reg_287;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        exitcond_i1_reg_125 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        i_i_reg_139 <= i_reg_282;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_i_reg_139 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_97 <= indvar_flatten_next_reg_247;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        indvar_flatten_reg_97 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        tlast_counter1_reg_111 <= tlast_counter_reg_292;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        tlast_counter1_reg_111 <= 6'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        tlast_counter_i_reg_153 <= tlast_counter_i_mid2_reg_261;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        tlast_counter_i_reg_153 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_252 <= exitcond_flatten_reg_252;
        exitcond_flatten_reg_252 <= exitcond_flatten_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_252 <= ap_reg_pp0_iter1_exitcond_flatten_reg_252;
        ap_reg_pp0_iter3_exitcond_flatten_reg_252 <= ap_reg_pp0_iter2_exitcond_flatten_reg_252;
        ap_reg_pp0_iter4_exitcond_flatten_reg_252 <= ap_reg_pp0_iter3_exitcond_flatten_reg_252;
        ap_reg_pp0_iter4_next_buffer_addr_reg_276 <= next_buffer_addr_reg_276;
        ap_reg_pp0_iter4_tmp_5_i_reg_271[10 : 0] <= tmp_5_i_reg_271[10 : 0];
        ap_reg_pp0_iter5_exitcond_flatten_reg_252 <= ap_reg_pp0_iter4_exitcond_flatten_reg_252;
        ap_reg_pp0_iter5_next_buffer_addr_reg_276 <= ap_reg_pp0_iter4_next_buffer_addr_reg_276;
        ap_reg_pp0_iter5_tmp_5_i_reg_271[10 : 0] <= ap_reg_pp0_iter4_tmp_5_i_reg_271[10 : 0];
        ap_reg_pp0_iter6_exitcond_flatten_reg_252 <= ap_reg_pp0_iter5_exitcond_flatten_reg_252;
        ap_reg_pp0_iter6_next_buffer_addr_reg_276 <= ap_reg_pp0_iter5_next_buffer_addr_reg_276;
        ap_reg_pp0_iter6_tmp_5_i_reg_271[10 : 0] <= ap_reg_pp0_iter5_tmp_5_i_reg_271[10 : 0];
        ap_reg_pp0_iter7_exitcond_flatten_reg_252 <= ap_reg_pp0_iter6_exitcond_flatten_reg_252;
        ap_reg_pp0_iter7_next_buffer_addr_reg_276 <= ap_reg_pp0_iter6_next_buffer_addr_reg_276;
        ap_reg_pp0_iter7_tmp_5_i_reg_271[10 : 0] <= ap_reg_pp0_iter6_tmp_5_i_reg_271[10 : 0];
        ap_reg_pp0_iter8_exitcond_flatten_reg_252 <= ap_reg_pp0_iter7_exitcond_flatten_reg_252;
        ap_reg_pp0_iter8_next_buffer_addr_reg_276 <= ap_reg_pp0_iter7_next_buffer_addr_reg_276;
        ap_reg_pp0_iter8_tmp_5_i_reg_271[10 : 0] <= ap_reg_pp0_iter7_tmp_5_i_reg_271[10 : 0];
        ap_reg_pp0_iter9_exitcond_flatten_reg_252 <= ap_reg_pp0_iter8_exitcond_flatten_reg_252;
        ap_reg_pp0_iter9_next_buffer_addr_reg_276 <= ap_reg_pp0_iter8_next_buffer_addr_reg_276;
        ap_reg_pp0_iter9_tmp_5_i_reg_271[10 : 0] <= ap_reg_pp0_iter8_tmp_5_i_reg_271[10 : 0];
        next_buffer_addr_reg_276 <= tmp_5_i_fu_215_p1;
        tmp_4_i_reg_266 <= tmp_4_i_fu_209_p2;
        tmp_5_i_reg_271[10 : 0] <= tmp_5_i_fu_215_p1[10 : 0];
        tmp_6_i_reg_297 <= tmp_6_i_fu_238_p3;
        tmp_8_i_reg_302 <= grp_fu_171_p2;
        tmp_9_i_reg_307 <= grp_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        exitcond_i_reg_287 <= exitcond_i_fu_226_p2;
        i_reg_282 <= i_fu_220_p2;
        tlast_counter_i_mid2_reg_261 <= tlast_counter_i_mid2_fu_201_p3;
        tlast_counter_reg_292 <= tlast_counter_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_next_reg_247 <= indvar_flatten_next_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((instream_V_data_0_load_A == 1'b1)) begin
        instream_V_data_0_payload_A <= instream_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((instream_V_data_0_load_B == 1'b1)) begin
        instream_V_data_0_payload_B <= instream_TDATA;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter9_exitcond_flatten_reg_252 == 1'd1) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0_0to9 = 1'b1;
    end else begin
        ap_idle_pp0_0to9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd1)) begin
            ap_phi_mux_exitcond_i1_phi_fu_129_p6 = 1'd0;
        end else if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd0)) begin
            ap_phi_mux_exitcond_i1_phi_fu_129_p6 = exitcond_i_reg_287;
        end else begin
            ap_phi_mux_exitcond_i1_phi_fu_129_p6 = exitcond_i1_reg_125;
        end
    end else begin
        ap_phi_mux_exitcond_i1_phi_fu_129_p6 = exitcond_i1_reg_125;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd1)) begin
            ap_phi_mux_i_i_phi_fu_143_p6 = 11'd0;
        end else if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd0)) begin
            ap_phi_mux_i_i_phi_fu_143_p6 = i_reg_282;
        end else begin
            ap_phi_mux_i_i_phi_fu_143_p6 = i_i_reg_139;
        end
    end else begin
        ap_phi_mux_i_i_phi_fu_143_p6 = i_i_reg_139;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_204)) begin
        if ((exitcond_flatten_reg_252 == 1'd1)) begin
            ap_phi_mux_indvar_flatten_phi_fu_101_p6 = 15'd0;
        end else if ((exitcond_flatten_reg_252 == 1'd0)) begin
            ap_phi_mux_indvar_flatten_phi_fu_101_p6 = indvar_flatten_next_reg_247;
        end else begin
            ap_phi_mux_indvar_flatten_phi_fu_101_p6 = indvar_flatten_reg_97;
        end
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_101_p6 = indvar_flatten_reg_97;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd1)) begin
            ap_phi_mux_tlast_counter1_phi_fu_115_p6 = 6'd1;
        end else if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd0)) begin
            ap_phi_mux_tlast_counter1_phi_fu_115_p6 = tlast_counter_reg_292;
        end else begin
            ap_phi_mux_tlast_counter1_phi_fu_115_p6 = tlast_counter1_reg_111;
        end
    end else begin
        ap_phi_mux_tlast_counter1_phi_fu_115_p6 = tlast_counter1_reg_111;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd1)) begin
            ap_phi_mux_tlast_counter_i_phi_fu_157_p6 = 6'd0;
        end else if ((ap_reg_pp0_iter3_exitcond_flatten_reg_252 == 1'd0)) begin
            ap_phi_mux_tlast_counter_i_phi_fu_157_p6 = tlast_counter_i_mid2_reg_261;
        end else begin
            ap_phi_mux_tlast_counter_i_phi_fu_157_p6 = tlast_counter_i_reg_153;
        end
    end else begin
        ap_phi_mux_tlast_counter_i_phi_fu_157_p6 = tlast_counter_i_reg_153;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond_flatten_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to9 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_167_ce = 1'b1;
    end else begin
        grp_fu_167_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_171_ce = 1'b1;
    end else begin
        grp_fu_171_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_TDATA_blk_n = instream_V_data_0_state[1'd0];
    end else begin
        instream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_V_data_0_ack_out = 1'b1;
    end else begin
        instream_V_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((instream_V_data_0_sel == 1'b1)) begin
        instream_V_data_0_data_out = instream_V_data_0_payload_B;
    end else begin
        instream_V_data_0_data_out = instream_V_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        instream_V_last_V_0_ack_out = 1'b1;
    end else begin
        instream_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        next_buffer_ce0 = 1'b1;
    end else begin
        next_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        next_buffer_ce1 = 1'b1;
    end else begin
        next_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        next_buffer_we1 = 1'b1;
    end else begin
        next_buffer_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((instream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((instream_V_data_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (instream_V_data_0_vld_out == 1'b0);
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_204 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign buffer_r_address0 = ap_reg_pp0_iter9_tmp_5_i_reg_271;

assign buffer_r_d0 = tmp_9_i_reg_307;

assign exitcond_flatten_fu_182_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_101_p6 == 15'd32767) ? 1'b1 : 1'b0);

assign exitcond_i_fu_226_p2 = ((i_fu_220_p2 == 11'd1024) ? 1'b1 : 1'b0);

assign i_fu_220_p2 = (i_i_mid2_fu_193_p3 + 11'd1);

assign i_i_mid2_fu_193_p3 = ((ap_phi_mux_exitcond_i1_phi_fu_129_p6[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_i_i_phi_fu_143_p6);

assign indvar_flatten_next_fu_176_p2 = (ap_phi_mux_indvar_flatten_phi_fu_101_p6 + 15'd1);

assign instream_TREADY = instream_V_last_V_0_state[1'd1];

assign instream_V_data_0_ack_in = instream_V_data_0_state[1'd1];

assign instream_V_data_0_load_A = (instream_V_data_0_state_cmp_full & ~instream_V_data_0_sel_wr);

assign instream_V_data_0_load_B = (instream_V_data_0_state_cmp_full & instream_V_data_0_sel_wr);

assign instream_V_data_0_sel = instream_V_data_0_sel_rd;

assign instream_V_data_0_state_cmp_full = ((instream_V_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign instream_V_data_0_vld_in = instream_TVALID;

assign instream_V_data_0_vld_out = instream_V_data_0_state[1'd0];

assign instream_V_last_V_0_vld_in = instream_TVALID;

assign next_buffer_address0 = tmp_5_i_fu_215_p1;

assign tlast_counter_fu_232_p2 = (tlast_counter_i_mid2_fu_201_p3 + 6'd1);

assign tlast_counter_i_mid2_fu_201_p3 = ((ap_phi_mux_exitcond_i1_phi_fu_129_p6[0:0] === 1'b1) ? ap_phi_mux_tlast_counter1_phi_fu_115_p6 : ap_phi_mux_tlast_counter_i_phi_fu_157_p6);

assign tmp_4_i_fu_209_p2 = ((tlast_counter_i_mid2_fu_201_p3 == 6'd0) ? 1'b1 : 1'b0);

assign tmp_5_i_fu_215_p1 = i_i_mid2_fu_193_p3;

assign tmp_6_i_fu_238_p3 = ((tmp_4_i_reg_266[0:0] === 1'b1) ? 32'd0 : next_buffer_q0);

always @ (posedge ap_clk) begin
    tmp_5_i_reg_271[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    ap_reg_pp0_iter4_tmp_5_i_reg_271[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    ap_reg_pp0_iter5_tmp_5_i_reg_271[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    ap_reg_pp0_iter6_tmp_5_i_reg_271[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    ap_reg_pp0_iter7_tmp_5_i_reg_271[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    ap_reg_pp0_iter8_tmp_5_i_reg_271[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    ap_reg_pp0_iter9_tmp_5_i_reg_271[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //process_instream_Loo
