// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_outstream_Lo (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        outstream_TREADY,
        outstream_TDATA,
        outstream_TVALID,
        outstream_TLAST,
        buffer_r_address0,
        buffer_r_ce0,
        buffer_r_q0,
        buffer_r_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input   outstream_TREADY;
output  [31:0] outstream_TDATA;
output   outstream_TVALID;
output  [0:0] outstream_TLAST;
output  [9:0] buffer_r_address0;
output   buffer_r_ce0;
input  [31:0] buffer_r_q0;
output   buffer_r_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buffer_r_ce0;
reg buffer_r_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] packet_out_last_V_fu_84_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    outstream_V_data_1_ack_in;
reg    ap_enable_reg_pp0_iter1;
wire    outstream_V_last_V_1_ack_in;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] outstream_V_data_1_data_out;
reg    outstream_V_data_1_vld_in;
wire    outstream_V_data_1_vld_out;
wire    outstream_V_data_1_ack_out;
reg   [31:0] outstream_V_data_1_payload_A;
reg   [31:0] outstream_V_data_1_payload_B;
reg    outstream_V_data_1_sel_rd;
reg    outstream_V_data_1_sel_wr;
wire    outstream_V_data_1_sel;
wire    outstream_V_data_1_load_A;
wire    outstream_V_data_1_load_B;
reg   [1:0] outstream_V_data_1_state;
wire    outstream_V_data_1_state_cmp_full;
reg   [0:0] outstream_V_last_V_1_data_out;
reg    outstream_V_last_V_1_vld_in;
wire    outstream_V_last_V_1_vld_out;
wire    outstream_V_last_V_1_ack_out;
reg   [0:0] outstream_V_last_V_1_payload_A;
reg   [0:0] outstream_V_last_V_1_payload_B;
reg    outstream_V_last_V_1_sel_rd;
reg    outstream_V_last_V_1_sel_wr;
wire    outstream_V_last_V_1_sel;
wire    outstream_V_last_V_1_load_A;
wire    outstream_V_last_V_1_load_B;
reg   [1:0] outstream_V_last_V_1_state;
wire    outstream_V_last_V_1_state_cmp_full;
reg   [0:0] packet_out_last_V_reg_103;
reg    outstream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [9:0] i_i_i3_reg_65;
reg   [0:0] ap_reg_pp0_iter1_packet_out_last_V_reg_103;
wire   [9:0] i_fu_90_p2;
reg   [9:0] i_reg_108;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg   [9:0] ap_phi_mux_i_i_i3_phi_fu_69_p6;
wire   [63:0] tmp_i_i_fu_79_p1;
reg    ap_block_pp0_stage0_01001;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_194;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 outstream_V_data_1_sel_rd = 1'b0;
#0 outstream_V_data_1_sel_wr = 1'b0;
#0 outstream_V_data_1_state = 2'd0;
#0 outstream_V_last_V_1_sel_rd = 1'b0;
#0 outstream_V_last_V_1_sel_wr = 1'b0;
#0 outstream_V_last_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_packet_out_last_V_reg_103 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        outstream_V_data_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_data_1_ack_out == 1'b1) & (outstream_V_data_1_vld_out == 1'b1))) begin
            outstream_V_data_1_sel_rd <= ~outstream_V_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        outstream_V_data_1_sel_wr <= 1'b0;
    end else begin
        if (((outstream_V_data_1_vld_in == 1'b1) & (outstream_V_data_1_ack_in == 1'b1))) begin
            outstream_V_data_1_sel_wr <= ~outstream_V_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        outstream_V_data_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_data_1_state == 2'd2) & (outstream_V_data_1_vld_in == 1'b0)) | ((outstream_V_data_1_state == 2'd3) & (outstream_V_data_1_vld_in == 1'b0) & (outstream_V_data_1_ack_out == 1'b1)))) begin
            outstream_V_data_1_state <= 2'd2;
        end else if ((((outstream_V_data_1_state == 2'd1) & (outstream_V_data_1_ack_out == 1'b0)) | ((outstream_V_data_1_state == 2'd3) & (outstream_V_data_1_ack_out == 1'b0) & (outstream_V_data_1_vld_in == 1'b1)))) begin
            outstream_V_data_1_state <= 2'd1;
        end else if (((~((outstream_V_data_1_ack_out == 1'b0) & (outstream_V_data_1_vld_in == 1'b1)) & ~((outstream_V_data_1_vld_in == 1'b0) & (outstream_V_data_1_ack_out == 1'b1)) & (outstream_V_data_1_state == 2'd3)) | ((outstream_V_data_1_state == 2'd1) & (outstream_V_data_1_ack_out == 1'b1)) | ((outstream_V_data_1_state == 2'd2) & (outstream_V_data_1_vld_in == 1'b1)))) begin
            outstream_V_data_1_state <= 2'd3;
        end else begin
            outstream_V_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        outstream_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outstream_V_last_V_1_ack_out == 1'b1) & (outstream_V_last_V_1_vld_out == 1'b1))) begin
            outstream_V_last_V_1_sel_rd <= ~outstream_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        outstream_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outstream_V_last_V_1_ack_in == 1'b1) & (outstream_V_last_V_1_vld_in == 1'b1))) begin
            outstream_V_last_V_1_sel_wr <= ~outstream_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        outstream_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((outstream_V_last_V_1_state == 2'd2) & (outstream_V_last_V_1_vld_in == 1'b0)) | ((outstream_V_last_V_1_state == 2'd3) & (outstream_V_last_V_1_vld_in == 1'b0) & (outstream_V_last_V_1_ack_out == 1'b1)))) begin
            outstream_V_last_V_1_state <= 2'd2;
        end else if ((((outstream_V_last_V_1_state == 2'd1) & (outstream_V_last_V_1_ack_out == 1'b0)) | ((outstream_V_last_V_1_state == 2'd3) & (outstream_V_last_V_1_ack_out == 1'b0) & (outstream_V_last_V_1_vld_in == 1'b1)))) begin
            outstream_V_last_V_1_state <= 2'd1;
        end else if (((~((outstream_V_last_V_1_vld_in == 1'b0) & (outstream_V_last_V_1_ack_out == 1'b1)) & ~((outstream_V_last_V_1_ack_out == 1'b0) & (outstream_V_last_V_1_vld_in == 1'b1)) & (outstream_V_last_V_1_state == 2'd3)) | ((outstream_V_last_V_1_state == 2'd1) & (outstream_V_last_V_1_ack_out == 1'b1)) | ((outstream_V_last_V_1_state == 2'd2) & (outstream_V_last_V_1_vld_in == 1'b1)))) begin
            outstream_V_last_V_1_state <= 2'd3;
        end else begin
            outstream_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((packet_out_last_V_reg_103 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_i_i3_reg_65 <= i_reg_108;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (packet_out_last_V_reg_103 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_i_i3_reg_65 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_packet_out_last_V_reg_103 <= packet_out_last_V_reg_103;
        packet_out_last_V_reg_103 <= packet_out_last_V_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_108 <= i_fu_90_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_V_data_1_load_A == 1'b1)) begin
        outstream_V_data_1_payload_A <= buffer_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_V_data_1_load_B == 1'b1)) begin
        outstream_V_data_1_payload_B <= buffer_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_V_last_V_1_load_A == 1'b1)) begin
        outstream_V_last_V_1_payload_A <= packet_out_last_V_reg_103;
    end
end

always @ (posedge ap_clk) begin
    if ((outstream_V_last_V_1_load_B == 1'b1)) begin
        outstream_V_last_V_1_payload_B <= packet_out_last_V_reg_103;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_reg_pp0_iter1_packet_out_last_V_reg_103 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_194)) begin
        if ((packet_out_last_V_reg_103 == 1'd1)) begin
            ap_phi_mux_i_i_i3_phi_fu_69_p6 = 10'd0;
        end else if ((packet_out_last_V_reg_103 == 1'd0)) begin
            ap_phi_mux_i_i_i3_phi_fu_69_p6 = i_reg_108;
        end else begin
            ap_phi_mux_i_i_i3_phi_fu_69_p6 = i_i_i3_reg_65;
        end
    end else begin
        ap_phi_mux_i_i_i3_phi_fu_69_p6 = i_i_i3_reg_65;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packet_out_last_V_fu_84_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (packet_out_last_V_reg_103 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_r_read = 1'b1;
    end else begin
        buffer_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        outstream_TDATA_blk_n = outstream_V_data_1_state[1'd1];
    end else begin
        outstream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((outstream_V_data_1_sel == 1'b1)) begin
        outstream_V_data_1_data_out = outstream_V_data_1_payload_B;
    end else begin
        outstream_V_data_1_data_out = outstream_V_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outstream_V_data_1_vld_in = 1'b1;
    end else begin
        outstream_V_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((outstream_V_last_V_1_sel == 1'b1)) begin
        outstream_V_last_V_1_data_out = outstream_V_last_V_1_payload_B;
    end else begin
        outstream_V_last_V_1_data_out = outstream_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        outstream_V_last_V_1_vld_in = 1'b1;
    end else begin
        outstream_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((outstream_V_last_V_1_ack_in == 1'b0) | (outstream_V_data_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((outstream_V_last_V_1_ack_in == 1'b0) | (outstream_V_data_1_ack_in == 1'b0))) | ((outstream_V_data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((outstream_V_last_V_1_ack_in == 1'b0) | (outstream_V_data_1_ack_in == 1'b0))) | ((outstream_V_data_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((outstream_V_last_V_1_ack_in == 1'b0) | (outstream_V_data_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_194 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign buffer_r_address0 = tmp_i_i_fu_79_p1;

assign i_fu_90_p2 = (ap_phi_mux_i_i_i3_phi_fu_69_p6 + 10'd1);

assign outstream_TDATA = outstream_V_data_1_data_out;

assign outstream_TLAST = outstream_V_last_V_1_data_out;

assign outstream_TVALID = outstream_V_last_V_1_state[1'd0];

assign outstream_V_data_1_ack_in = outstream_V_data_1_state[1'd1];

assign outstream_V_data_1_ack_out = outstream_TREADY;

assign outstream_V_data_1_load_A = (outstream_V_data_1_state_cmp_full & ~outstream_V_data_1_sel_wr);

assign outstream_V_data_1_load_B = (outstream_V_data_1_state_cmp_full & outstream_V_data_1_sel_wr);

assign outstream_V_data_1_sel = outstream_V_data_1_sel_rd;

assign outstream_V_data_1_state_cmp_full = ((outstream_V_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outstream_V_data_1_vld_out = outstream_V_data_1_state[1'd0];

assign outstream_V_last_V_1_ack_in = outstream_V_last_V_1_state[1'd1];

assign outstream_V_last_V_1_ack_out = outstream_TREADY;

assign outstream_V_last_V_1_load_A = (outstream_V_last_V_1_state_cmp_full & ~outstream_V_last_V_1_sel_wr);

assign outstream_V_last_V_1_load_B = (outstream_V_last_V_1_state_cmp_full & outstream_V_last_V_1_sel_wr);

assign outstream_V_last_V_1_sel = outstream_V_last_V_1_sel_rd;

assign outstream_V_last_V_1_state_cmp_full = ((outstream_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outstream_V_last_V_1_vld_out = outstream_V_last_V_1_state[1'd0];

assign packet_out_last_V_fu_84_p2 = ((ap_phi_mux_i_i_i3_phi_fu_69_p6 == 10'd1023) ? 1'b1 : 1'b0);

assign tmp_i_i_fu_79_p1 = ap_phi_mux_i_i_i3_phi_fu_69_p6;

endmodule //process_outstream_Lo
